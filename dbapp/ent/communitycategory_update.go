// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/community"
	"dbapp/ent/communitycategory"
	"dbapp/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CommunityCategoryUpdate is the builder for updating CommunityCategory entities.
type CommunityCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *CommunityCategoryMutation
}

// Where appends a list predicates to the CommunityCategoryUpdate builder.
func (ccu *CommunityCategoryUpdate) Where(ps ...predicate.CommunityCategory) *CommunityCategoryUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetName sets the "name" field.
func (ccu *CommunityCategoryUpdate) SetName(s string) *CommunityCategoryUpdate {
	ccu.mutation.SetName(s)
	return ccu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ccu *CommunityCategoryUpdate) SetNillableName(s *string) *CommunityCategoryUpdate {
	if s != nil {
		ccu.SetName(*s)
	}
	return ccu
}

// SetDisplayOrder sets the "display_order" field.
func (ccu *CommunityCategoryUpdate) SetDisplayOrder(i int) *CommunityCategoryUpdate {
	ccu.mutation.ResetDisplayOrder()
	ccu.mutation.SetDisplayOrder(i)
	return ccu
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (ccu *CommunityCategoryUpdate) SetNillableDisplayOrder(i *int) *CommunityCategoryUpdate {
	if i != nil {
		ccu.SetDisplayOrder(*i)
	}
	return ccu
}

// AddDisplayOrder adds i to the "display_order" field.
func (ccu *CommunityCategoryUpdate) AddDisplayOrder(i int) *CommunityCategoryUpdate {
	ccu.mutation.AddDisplayOrder(i)
	return ccu
}

// AddCommunityIDs adds the "community" edge to the Community entity by IDs.
func (ccu *CommunityCategoryUpdate) AddCommunityIDs(ids ...uuid.UUID) *CommunityCategoryUpdate {
	ccu.mutation.AddCommunityIDs(ids...)
	return ccu
}

// AddCommunity adds the "community" edges to the Community entity.
func (ccu *CommunityCategoryUpdate) AddCommunity(c ...*Community) *CommunityCategoryUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.AddCommunityIDs(ids...)
}

// Mutation returns the CommunityCategoryMutation object of the builder.
func (ccu *CommunityCategoryUpdate) Mutation() *CommunityCategoryMutation {
	return ccu.mutation
}

// ClearCommunity clears all "community" edges to the Community entity.
func (ccu *CommunityCategoryUpdate) ClearCommunity() *CommunityCategoryUpdate {
	ccu.mutation.ClearCommunity()
	return ccu
}

// RemoveCommunityIDs removes the "community" edge to Community entities by IDs.
func (ccu *CommunityCategoryUpdate) RemoveCommunityIDs(ids ...uuid.UUID) *CommunityCategoryUpdate {
	ccu.mutation.RemoveCommunityIDs(ids...)
	return ccu
}

// RemoveCommunity removes "community" edges to Community entities.
func (ccu *CommunityCategoryUpdate) RemoveCommunity(c ...*Community) *CommunityCategoryUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.RemoveCommunityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CommunityCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CommunityCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CommunityCategoryUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CommunityCategoryUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccu *CommunityCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(communitycategory.Table, communitycategory.Columns, sqlgraph.NewFieldSpec(communitycategory.FieldID, field.TypeUUID))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.Name(); ok {
		_spec.SetField(communitycategory.FieldName, field.TypeString, value)
	}
	if value, ok := ccu.mutation.DisplayOrder(); ok {
		_spec.SetField(communitycategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(communitycategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if ccu.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communitycategory.CommunityTable,
			Columns: communitycategory.CommunityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedCommunityIDs(); len(nodes) > 0 && !ccu.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communitycategory.CommunityTable,
			Columns: communitycategory.CommunityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communitycategory.CommunityTable,
			Columns: communitycategory.CommunityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communitycategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// CommunityCategoryUpdateOne is the builder for updating a single CommunityCategory entity.
type CommunityCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunityCategoryMutation
}

// SetName sets the "name" field.
func (ccuo *CommunityCategoryUpdateOne) SetName(s string) *CommunityCategoryUpdateOne {
	ccuo.mutation.SetName(s)
	return ccuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ccuo *CommunityCategoryUpdateOne) SetNillableName(s *string) *CommunityCategoryUpdateOne {
	if s != nil {
		ccuo.SetName(*s)
	}
	return ccuo
}

// SetDisplayOrder sets the "display_order" field.
func (ccuo *CommunityCategoryUpdateOne) SetDisplayOrder(i int) *CommunityCategoryUpdateOne {
	ccuo.mutation.ResetDisplayOrder()
	ccuo.mutation.SetDisplayOrder(i)
	return ccuo
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (ccuo *CommunityCategoryUpdateOne) SetNillableDisplayOrder(i *int) *CommunityCategoryUpdateOne {
	if i != nil {
		ccuo.SetDisplayOrder(*i)
	}
	return ccuo
}

// AddDisplayOrder adds i to the "display_order" field.
func (ccuo *CommunityCategoryUpdateOne) AddDisplayOrder(i int) *CommunityCategoryUpdateOne {
	ccuo.mutation.AddDisplayOrder(i)
	return ccuo
}

// AddCommunityIDs adds the "community" edge to the Community entity by IDs.
func (ccuo *CommunityCategoryUpdateOne) AddCommunityIDs(ids ...uuid.UUID) *CommunityCategoryUpdateOne {
	ccuo.mutation.AddCommunityIDs(ids...)
	return ccuo
}

// AddCommunity adds the "community" edges to the Community entity.
func (ccuo *CommunityCategoryUpdateOne) AddCommunity(c ...*Community) *CommunityCategoryUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.AddCommunityIDs(ids...)
}

// Mutation returns the CommunityCategoryMutation object of the builder.
func (ccuo *CommunityCategoryUpdateOne) Mutation() *CommunityCategoryMutation {
	return ccuo.mutation
}

// ClearCommunity clears all "community" edges to the Community entity.
func (ccuo *CommunityCategoryUpdateOne) ClearCommunity() *CommunityCategoryUpdateOne {
	ccuo.mutation.ClearCommunity()
	return ccuo
}

// RemoveCommunityIDs removes the "community" edge to Community entities by IDs.
func (ccuo *CommunityCategoryUpdateOne) RemoveCommunityIDs(ids ...uuid.UUID) *CommunityCategoryUpdateOne {
	ccuo.mutation.RemoveCommunityIDs(ids...)
	return ccuo
}

// RemoveCommunity removes "community" edges to Community entities.
func (ccuo *CommunityCategoryUpdateOne) RemoveCommunity(c ...*Community) *CommunityCategoryUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.RemoveCommunityIDs(ids...)
}

// Where appends a list predicates to the CommunityCategoryUpdate builder.
func (ccuo *CommunityCategoryUpdateOne) Where(ps ...predicate.CommunityCategory) *CommunityCategoryUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CommunityCategoryUpdateOne) Select(field string, fields ...string) *CommunityCategoryUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CommunityCategory entity.
func (ccuo *CommunityCategoryUpdateOne) Save(ctx context.Context) (*CommunityCategory, error) {
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CommunityCategoryUpdateOne) SaveX(ctx context.Context) *CommunityCategory {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CommunityCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CommunityCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccuo *CommunityCategoryUpdateOne) sqlSave(ctx context.Context) (_node *CommunityCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(communitycategory.Table, communitycategory.Columns, sqlgraph.NewFieldSpec(communitycategory.FieldID, field.TypeUUID))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommunityCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, communitycategory.FieldID)
		for _, f := range fields {
			if !communitycategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != communitycategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.Name(); ok {
		_spec.SetField(communitycategory.FieldName, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.DisplayOrder(); ok {
		_spec.SetField(communitycategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(communitycategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if ccuo.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communitycategory.CommunityTable,
			Columns: communitycategory.CommunityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedCommunityIDs(); len(nodes) > 0 && !ccuo.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communitycategory.CommunityTable,
			Columns: communitycategory.CommunityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communitycategory.CommunityTable,
			Columns: communitycategory.CommunityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommunityCategory{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communitycategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}

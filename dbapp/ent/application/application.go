// Code generated by ent, DO NOT EDIT.

package application

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the application type in the database.
	Label = "application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAltText holds the string denoting the alt_text field in the database.
	FieldAltText = "alt_text"
	// FieldURI holds the string denoting the uri field in the database.
	FieldURI = "uri"
	// FieldIconURI holds the string denoting the icon_uri field in the database.
	FieldIconURI = "icon_uri"
	// FieldIsFavourite holds the string denoting the is_favourite field in the database.
	FieldIsFavourite = "is_favourite"
	// FieldValidFrom holds the string denoting the valid_from field in the database.
	FieldValidFrom = "valid_from"
	// FieldValidTo holds the string denoting the valid_to field in the database.
	FieldValidTo = "valid_to"
	// EdgeApplicationCategory holds the string denoting the application_category edge name in mutations.
	EdgeApplicationCategory = "application_category"
	// EdgePartner holds the string denoting the partner edge name in mutations.
	EdgePartner = "partner"
	// Table holds the table name of the application in the database.
	Table = "applications"
	// ApplicationCategoryTable is the table that holds the application_category relation/edge.
	ApplicationCategoryTable = "applications"
	// ApplicationCategoryInverseTable is the table name for the ApplicationCategory entity.
	// It exists in this package in order to avoid circular dependency with the "applicationcategory" package.
	ApplicationCategoryInverseTable = "application_categories"
	// ApplicationCategoryColumn is the table column denoting the application_category relation/edge.
	ApplicationCategoryColumn = "category_id"
	// PartnerTable is the table that holds the partner relation/edge. The primary key declared below.
	PartnerTable = "application_partner_access"
	// PartnerInverseTable is the table name for the Partner entity.
	// It exists in this package in order to avoid circular dependency with the "partner" package.
	PartnerInverseTable = "partners"
)

// Columns holds all SQL columns for application fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldAltText,
	FieldURI,
	FieldIconURI,
	FieldIsFavourite,
	FieldValidFrom,
	FieldValidTo,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "applications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"category_id",
}

var (
	// PartnerPrimaryKey and PartnerColumn2 are the table columns denoting the
	// primary key for the partner relation (M2M).
	PartnerPrimaryKey = []string{"application_id", "partner_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Application queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAltText orders the results by the alt_text field.
func ByAltText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAltText, opts...).ToFunc()
}

// ByURI orders the results by the uri field.
func ByURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURI, opts...).ToFunc()
}

// ByIconURI orders the results by the icon_uri field.
func ByIconURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconURI, opts...).ToFunc()
}

// ByIsFavourite orders the results by the is_favourite field.
func ByIsFavourite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFavourite, opts...).ToFunc()
}

// ByValidFrom orders the results by the valid_from field.
func ByValidFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidFrom, opts...).ToFunc()
}

// ByValidTo orders the results by the valid_to field.
func ByValidTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidTo, opts...).ToFunc()
}

// ByApplicationCategoryField orders the results by application_category field.
func ByApplicationCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByPartnerCount orders the results by partner count.
func ByPartnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPartnerStep(), opts...)
	}
}

// ByPartner orders the results by partner terms.
func ByPartner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicationCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationCategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicationCategoryTable, ApplicationCategoryColumn),
	)
}
func newPartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PartnerTable, PartnerPrimaryKey...),
	)
}

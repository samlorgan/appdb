// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dbapp/ent/community"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Community is the model entity for the Community schema.
type Community struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// WhamSiteID holds the value of the "wham_site_id" field.
	WhamSiteID int `json:"wham_site_id,omitempty"`
	// WhamTitle holds the value of the "wham_title" field.
	WhamTitle string `json:"wham_title,omitempty"`
	// WhanDescription holds the value of the "whan_description" field.
	WhanDescription string `json:"whan_description,omitempty"`
	// WhamCommunityURL holds the value of the "wham_community_url" field.
	WhamCommunityURL string `json:"wham_community_url,omitempty"`
	// WhamCreated holds the value of the "wham_created" field.
	WhamCreated time.Time `json:"wham_created,omitempty"`
	// WhamUpdated holds the value of the "wham_updated" field.
	WhamUpdated time.Time `json:"wham_updated,omitempty"`
	// FeaturedFrom holds the value of the "featured_from" field.
	FeaturedFrom time.Time `json:"featured_from,omitempty"`
	// FeaturedTo holds the value of the "featured_to" field.
	FeaturedTo time.Time `json:"featured_to,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommunityQuery when eager-loading is set.
	Edges        CommunityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommunityEdges holds the relations/edges for other nodes in the graph.
type CommunityEdges struct {
	// Adgroup holds the value of the adgroup edge.
	Adgroup []*ADGroup `json:"adgroup,omitempty"`
	// CommunityCategory holds the value of the community_category edge.
	CommunityCategory []*CommunityCategory `json:"community_category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AdgroupOrErr returns the Adgroup value or an error if the edge
// was not loaded in eager-loading.
func (e CommunityEdges) AdgroupOrErr() ([]*ADGroup, error) {
	if e.loadedTypes[0] {
		return e.Adgroup, nil
	}
	return nil, &NotLoadedError{edge: "adgroup"}
}

// CommunityCategoryOrErr returns the CommunityCategory value or an error if the edge
// was not loaded in eager-loading.
func (e CommunityEdges) CommunityCategoryOrErr() ([]*CommunityCategory, error) {
	if e.loadedTypes[1] {
		return e.CommunityCategory, nil
	}
	return nil, &NotLoadedError{edge: "community_category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Community) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case community.FieldWhamSiteID:
			values[i] = new(sql.NullInt64)
		case community.FieldWhamTitle, community.FieldWhanDescription, community.FieldWhamCommunityURL:
			values[i] = new(sql.NullString)
		case community.FieldWhamCreated, community.FieldWhamUpdated, community.FieldFeaturedFrom, community.FieldFeaturedTo:
			values[i] = new(sql.NullTime)
		case community.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Community fields.
func (c *Community) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case community.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case community.FieldWhamSiteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wham_site_id", values[i])
			} else if value.Valid {
				c.WhamSiteID = int(value.Int64)
			}
		case community.FieldWhamTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wham_title", values[i])
			} else if value.Valid {
				c.WhamTitle = value.String
			}
		case community.FieldWhanDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whan_description", values[i])
			} else if value.Valid {
				c.WhanDescription = value.String
			}
		case community.FieldWhamCommunityURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wham_community_url", values[i])
			} else if value.Valid {
				c.WhamCommunityURL = value.String
			}
		case community.FieldWhamCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field wham_created", values[i])
			} else if value.Valid {
				c.WhamCreated = value.Time
			}
		case community.FieldWhamUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field wham_updated", values[i])
			} else if value.Valid {
				c.WhamUpdated = value.Time
			}
		case community.FieldFeaturedFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field featured_from", values[i])
			} else if value.Valid {
				c.FeaturedFrom = value.Time
			}
		case community.FieldFeaturedTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field featured_to", values[i])
			} else if value.Valid {
				c.FeaturedTo = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Community.
// This includes values selected through modifiers, order, etc.
func (c *Community) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryAdgroup queries the "adgroup" edge of the Community entity.
func (c *Community) QueryAdgroup() *ADGroupQuery {
	return NewCommunityClient(c.config).QueryAdgroup(c)
}

// QueryCommunityCategory queries the "community_category" edge of the Community entity.
func (c *Community) QueryCommunityCategory() *CommunityCategoryQuery {
	return NewCommunityClient(c.config).QueryCommunityCategory(c)
}

// Update returns a builder for updating this Community.
// Note that you need to call Community.Unwrap() before calling this method if this Community
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Community) Update() *CommunityUpdateOne {
	return NewCommunityClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Community entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Community) Unwrap() *Community {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Community is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Community) String() string {
	var builder strings.Builder
	builder.WriteString("Community(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("wham_site_id=")
	builder.WriteString(fmt.Sprintf("%v", c.WhamSiteID))
	builder.WriteString(", ")
	builder.WriteString("wham_title=")
	builder.WriteString(c.WhamTitle)
	builder.WriteString(", ")
	builder.WriteString("whan_description=")
	builder.WriteString(c.WhanDescription)
	builder.WriteString(", ")
	builder.WriteString("wham_community_url=")
	builder.WriteString(c.WhamCommunityURL)
	builder.WriteString(", ")
	builder.WriteString("wham_created=")
	builder.WriteString(c.WhamCreated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("wham_updated=")
	builder.WriteString(c.WhamUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("featured_from=")
	builder.WriteString(c.FeaturedFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("featured_to=")
	builder.WriteString(c.FeaturedTo.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Communities is a parsable slice of Community.
type Communities []*Community

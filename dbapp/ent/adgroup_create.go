// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/adgroup"
	"dbapp/ent/community"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ADGroupCreate is the builder for creating a ADGroup entity.
type ADGroupCreate struct {
	config
	mutation *ADGroupMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (agc *ADGroupCreate) SetName(s string) *ADGroupCreate {
	agc.mutation.SetName(s)
	return agc
}

// SetID sets the "id" field.
func (agc *ADGroupCreate) SetID(u uuid.UUID) *ADGroupCreate {
	agc.mutation.SetID(u)
	return agc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (agc *ADGroupCreate) SetNillableID(u *uuid.UUID) *ADGroupCreate {
	if u != nil {
		agc.SetID(*u)
	}
	return agc
}

// AddCommunityIDs adds the "community" edge to the Community entity by IDs.
func (agc *ADGroupCreate) AddCommunityIDs(ids ...uuid.UUID) *ADGroupCreate {
	agc.mutation.AddCommunityIDs(ids...)
	return agc
}

// AddCommunity adds the "community" edges to the Community entity.
func (agc *ADGroupCreate) AddCommunity(c ...*Community) *ADGroupCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return agc.AddCommunityIDs(ids...)
}

// Mutation returns the ADGroupMutation object of the builder.
func (agc *ADGroupCreate) Mutation() *ADGroupMutation {
	return agc.mutation
}

// Save creates the ADGroup in the database.
func (agc *ADGroupCreate) Save(ctx context.Context) (*ADGroup, error) {
	agc.defaults()
	return withHooks(ctx, agc.sqlSave, agc.mutation, agc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agc *ADGroupCreate) SaveX(ctx context.Context) *ADGroup {
	v, err := agc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agc *ADGroupCreate) Exec(ctx context.Context) error {
	_, err := agc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agc *ADGroupCreate) ExecX(ctx context.Context) {
	if err := agc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agc *ADGroupCreate) defaults() {
	if _, ok := agc.mutation.ID(); !ok {
		v := adgroup.DefaultID()
		agc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agc *ADGroupCreate) check() error {
	if _, ok := agc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ADGroup.name"`)}
	}
	return nil
}

func (agc *ADGroupCreate) sqlSave(ctx context.Context) (*ADGroup, error) {
	if err := agc.check(); err != nil {
		return nil, err
	}
	_node, _spec := agc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	agc.mutation.id = &_node.ID
	agc.mutation.done = true
	return _node, nil
}

func (agc *ADGroupCreate) createSpec() (*ADGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &ADGroup{config: agc.config}
		_spec = sqlgraph.NewCreateSpec(adgroup.Table, sqlgraph.NewFieldSpec(adgroup.FieldID, field.TypeUUID))
	)
	if id, ok := agc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := agc.mutation.Name(); ok {
		_spec.SetField(adgroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := agc.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   adgroup.CommunityTable,
			Columns: adgroup.CommunityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ADGroupCreateBulk is the builder for creating many ADGroup entities in bulk.
type ADGroupCreateBulk struct {
	config
	err      error
	builders []*ADGroupCreate
}

// Save creates the ADGroup entities in the database.
func (agcb *ADGroupCreateBulk) Save(ctx context.Context) ([]*ADGroup, error) {
	if agcb.err != nil {
		return nil, agcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(agcb.builders))
	nodes := make([]*ADGroup, len(agcb.builders))
	mutators := make([]Mutator, len(agcb.builders))
	for i := range agcb.builders {
		func(i int, root context.Context) {
			builder := agcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ADGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agcb *ADGroupCreateBulk) SaveX(ctx context.Context) []*ADGroup {
	v, err := agcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agcb *ADGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := agcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agcb *ADGroupCreateBulk) ExecX(ctx context.Context) {
	if err := agcb.Exec(ctx); err != nil {
		panic(err)
	}
}

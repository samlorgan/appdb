// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/partnerpagelinkfragment"
	"dbapp/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerPageLinkFragmentDelete is the builder for deleting a PartnerPageLinkFragment entity.
type PartnerPageLinkFragmentDelete struct {
	config
	hooks    []Hook
	mutation *PartnerPageLinkFragmentMutation
}

// Where appends a list predicates to the PartnerPageLinkFragmentDelete builder.
func (pplfd *PartnerPageLinkFragmentDelete) Where(ps ...predicate.PartnerPageLinkFragment) *PartnerPageLinkFragmentDelete {
	pplfd.mutation.Where(ps...)
	return pplfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pplfd *PartnerPageLinkFragmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pplfd.sqlExec, pplfd.mutation, pplfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pplfd *PartnerPageLinkFragmentDelete) ExecX(ctx context.Context) int {
	n, err := pplfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pplfd *PartnerPageLinkFragmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(partnerpagelinkfragment.Table, sqlgraph.NewFieldSpec(partnerpagelinkfragment.FieldID, field.TypeUUID))
	if ps := pplfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pplfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pplfd.mutation.done = true
	return affected, err
}

// PartnerPageLinkFragmentDeleteOne is the builder for deleting a single PartnerPageLinkFragment entity.
type PartnerPageLinkFragmentDeleteOne struct {
	pplfd *PartnerPageLinkFragmentDelete
}

// Where appends a list predicates to the PartnerPageLinkFragmentDelete builder.
func (pplfdo *PartnerPageLinkFragmentDeleteOne) Where(ps ...predicate.PartnerPageLinkFragment) *PartnerPageLinkFragmentDeleteOne {
	pplfdo.pplfd.mutation.Where(ps...)
	return pplfdo
}

// Exec executes the deletion query.
func (pplfdo *PartnerPageLinkFragmentDeleteOne) Exec(ctx context.Context) error {
	n, err := pplfdo.pplfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{partnerpagelinkfragment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pplfdo *PartnerPageLinkFragmentDeleteOne) ExecX(ctx context.Context) {
	if err := pplfdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/application"
	"dbapp/ent/applicationcategory"
	"dbapp/ent/partner"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ApplicationCreate is the builder for creating a Application entity.
type ApplicationCreate struct {
	config
	mutation *ApplicationMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *ApplicationCreate) SetName(s string) *ApplicationCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *ApplicationCreate) SetDescription(s string) *ApplicationCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetAltText sets the "alt_text" field.
func (ac *ApplicationCreate) SetAltText(s string) *ApplicationCreate {
	ac.mutation.SetAltText(s)
	return ac
}

// SetURI sets the "uri" field.
func (ac *ApplicationCreate) SetURI(s string) *ApplicationCreate {
	ac.mutation.SetURI(s)
	return ac
}

// SetIconURI sets the "icon_uri" field.
func (ac *ApplicationCreate) SetIconURI(s string) *ApplicationCreate {
	ac.mutation.SetIconURI(s)
	return ac
}

// SetIsFavourite sets the "is_favourite" field.
func (ac *ApplicationCreate) SetIsFavourite(b bool) *ApplicationCreate {
	ac.mutation.SetIsFavourite(b)
	return ac
}

// SetValidFrom sets the "valid_from" field.
func (ac *ApplicationCreate) SetValidFrom(t time.Time) *ApplicationCreate {
	ac.mutation.SetValidFrom(t)
	return ac
}

// SetValidTo sets the "valid_to" field.
func (ac *ApplicationCreate) SetValidTo(t time.Time) *ApplicationCreate {
	ac.mutation.SetValidTo(t)
	return ac
}

// SetID sets the "id" field.
func (ac *ApplicationCreate) SetID(u uuid.UUID) *ApplicationCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableID(u *uuid.UUID) *ApplicationCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetApplicationCategoryID sets the "application_category" edge to the ApplicationCategory entity by ID.
func (ac *ApplicationCreate) SetApplicationCategoryID(id uuid.UUID) *ApplicationCreate {
	ac.mutation.SetApplicationCategoryID(id)
	return ac
}

// SetApplicationCategory sets the "application_category" edge to the ApplicationCategory entity.
func (ac *ApplicationCreate) SetApplicationCategory(a *ApplicationCategory) *ApplicationCreate {
	return ac.SetApplicationCategoryID(a.ID)
}

// AddPartnerIDs adds the "partner" edge to the Partner entity by IDs.
func (ac *ApplicationCreate) AddPartnerIDs(ids ...uuid.UUID) *ApplicationCreate {
	ac.mutation.AddPartnerIDs(ids...)
	return ac
}

// AddPartner adds the "partner" edges to the Partner entity.
func (ac *ApplicationCreate) AddPartner(p ...*Partner) *ApplicationCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddPartnerIDs(ids...)
}

// Mutation returns the ApplicationMutation object of the builder.
func (ac *ApplicationCreate) Mutation() *ApplicationMutation {
	return ac.mutation
}

// Save creates the Application in the database.
func (ac *ApplicationCreate) Save(ctx context.Context) (*Application, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ApplicationCreate) SaveX(ctx context.Context) *Application {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ApplicationCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ApplicationCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ApplicationCreate) defaults() {
	if _, ok := ac.mutation.ID(); !ok {
		v := application.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ApplicationCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Application.name"`)}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Application.description"`)}
	}
	if _, ok := ac.mutation.AltText(); !ok {
		return &ValidationError{Name: "alt_text", err: errors.New(`ent: missing required field "Application.alt_text"`)}
	}
	if _, ok := ac.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`ent: missing required field "Application.uri"`)}
	}
	if _, ok := ac.mutation.IconURI(); !ok {
		return &ValidationError{Name: "icon_uri", err: errors.New(`ent: missing required field "Application.icon_uri"`)}
	}
	if _, ok := ac.mutation.IsFavourite(); !ok {
		return &ValidationError{Name: "is_favourite", err: errors.New(`ent: missing required field "Application.is_favourite"`)}
	}
	if _, ok := ac.mutation.ValidFrom(); !ok {
		return &ValidationError{Name: "valid_from", err: errors.New(`ent: missing required field "Application.valid_from"`)}
	}
	if _, ok := ac.mutation.ValidTo(); !ok {
		return &ValidationError{Name: "valid_to", err: errors.New(`ent: missing required field "Application.valid_to"`)}
	}
	if _, ok := ac.mutation.ApplicationCategoryID(); !ok {
		return &ValidationError{Name: "application_category", err: errors.New(`ent: missing required edge "Application.application_category"`)}
	}
	return nil
}

func (ac *ApplicationCreate) sqlSave(ctx context.Context) (*Application, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ApplicationCreate) createSpec() (*Application, *sqlgraph.CreateSpec) {
	var (
		_node = &Application{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(application.Table, sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(application.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.AltText(); ok {
		_spec.SetField(application.FieldAltText, field.TypeString, value)
		_node.AltText = value
	}
	if value, ok := ac.mutation.URI(); ok {
		_spec.SetField(application.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := ac.mutation.IconURI(); ok {
		_spec.SetField(application.FieldIconURI, field.TypeString, value)
		_node.IconURI = value
	}
	if value, ok := ac.mutation.IsFavourite(); ok {
		_spec.SetField(application.FieldIsFavourite, field.TypeBool, value)
		_node.IsFavourite = value
	}
	if value, ok := ac.mutation.ValidFrom(); ok {
		_spec.SetField(application.FieldValidFrom, field.TypeTime, value)
		_node.ValidFrom = value
	}
	if value, ok := ac.mutation.ValidTo(); ok {
		_spec.SetField(application.FieldValidTo, field.TypeTime, value)
		_node.ValidTo = value
	}
	if nodes := ac.mutation.ApplicationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ApplicationCategoryTable,
			Columns: []string{application.ApplicationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.category_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   application.PartnerTable,
			Columns: application.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicationCreateBulk is the builder for creating many Application entities in bulk.
type ApplicationCreateBulk struct {
	config
	err      error
	builders []*ApplicationCreate
}

// Save creates the Application entities in the database.
func (acb *ApplicationCreateBulk) Save(ctx context.Context) ([]*Application, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Application, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ApplicationCreateBulk) SaveX(ctx context.Context) []*Application {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

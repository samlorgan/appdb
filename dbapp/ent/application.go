// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dbapp/ent/application"
	"dbapp/ent/applicationcategory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Application is the model entity for the Application schema.
type Application struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AltText holds the value of the "alt_text" field.
	AltText string `json:"alt_text,omitempty"`
	// URI holds the value of the "uri" field.
	URI string `json:"uri,omitempty"`
	// IconURI holds the value of the "icon_uri" field.
	IconURI string `json:"icon_uri,omitempty"`
	// IsFavourite holds the value of the "is_favourite" field.
	IsFavourite bool `json:"is_favourite,omitempty"`
	// ValidFrom holds the value of the "valid_from" field.
	ValidFrom time.Time `json:"valid_from,omitempty"`
	// ValidTo holds the value of the "valid_to" field.
	ValidTo time.Time `json:"valid_to,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicationQuery when eager-loading is set.
	Edges        ApplicationEdges `json:"edges"`
	category_id  *uuid.UUID
	selectValues sql.SelectValues
}

// ApplicationEdges holds the relations/edges for other nodes in the graph.
type ApplicationEdges struct {
	// ApplicationCategory holds the value of the application_category edge.
	ApplicationCategory *ApplicationCategory `json:"application_category,omitempty"`
	// Partner holds the value of the partner edge.
	Partner []*Partner `json:"partner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApplicationCategoryOrErr returns the ApplicationCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) ApplicationCategoryOrErr() (*ApplicationCategory, error) {
	if e.loadedTypes[0] {
		if e.ApplicationCategory == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: applicationcategory.Label}
		}
		return e.ApplicationCategory, nil
	}
	return nil, &NotLoadedError{edge: "application_category"}
}

// PartnerOrErr returns the Partner value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicationEdges) PartnerOrErr() ([]*Partner, error) {
	if e.loadedTypes[1] {
		return e.Partner, nil
	}
	return nil, &NotLoadedError{edge: "partner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Application) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case application.FieldIsFavourite:
			values[i] = new(sql.NullBool)
		case application.FieldName, application.FieldDescription, application.FieldAltText, application.FieldURI, application.FieldIconURI:
			values[i] = new(sql.NullString)
		case application.FieldValidFrom, application.FieldValidTo:
			values[i] = new(sql.NullTime)
		case application.FieldID:
			values[i] = new(uuid.UUID)
		case application.ForeignKeys[0]: // category_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Application fields.
func (a *Application) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case application.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case application.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case application.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case application.FieldAltText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alt_text", values[i])
			} else if value.Valid {
				a.AltText = value.String
			}
		case application.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				a.URI = value.String
			}
		case application.FieldIconURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_uri", values[i])
			} else if value.Valid {
				a.IconURI = value.String
			}
		case application.FieldIsFavourite:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_favourite", values[i])
			} else if value.Valid {
				a.IsFavourite = value.Bool
			}
		case application.FieldValidFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_from", values[i])
			} else if value.Valid {
				a.ValidFrom = value.Time
			}
		case application.FieldValidTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_to", values[i])
			} else if value.Valid {
				a.ValidTo = value.Time
			}
		case application.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				a.category_id = new(uuid.UUID)
				*a.category_id = *value.S.(*uuid.UUID)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Application.
// This includes values selected through modifiers, order, etc.
func (a *Application) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryApplicationCategory queries the "application_category" edge of the Application entity.
func (a *Application) QueryApplicationCategory() *ApplicationCategoryQuery {
	return NewApplicationClient(a.config).QueryApplicationCategory(a)
}

// QueryPartner queries the "partner" edge of the Application entity.
func (a *Application) QueryPartner() *PartnerQuery {
	return NewApplicationClient(a.config).QueryPartner(a)
}

// Update returns a builder for updating this Application.
// Note that you need to call Application.Unwrap() before calling this method if this Application
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Application) Update() *ApplicationUpdateOne {
	return NewApplicationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Application entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Application) Unwrap() *Application {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Application is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Application) String() string {
	var builder strings.Builder
	builder.WriteString("Application(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("alt_text=")
	builder.WriteString(a.AltText)
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(a.URI)
	builder.WriteString(", ")
	builder.WriteString("icon_uri=")
	builder.WriteString(a.IconURI)
	builder.WriteString(", ")
	builder.WriteString("is_favourite=")
	builder.WriteString(fmt.Sprintf("%v", a.IsFavourite))
	builder.WriteString(", ")
	builder.WriteString("valid_from=")
	builder.WriteString(a.ValidFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("valid_to=")
	builder.WriteString(a.ValidTo.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Applications is a parsable slice of Application.
type Applications []*Application

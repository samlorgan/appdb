// Code generated by ent, DO NOT EDIT.

package community

import (
	"dbapp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldID, id))
}

// WhamSiteID applies equality check predicate on the "wham_site_id" field. It's identical to WhamSiteIDEQ.
func WhamSiteID(v int) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamSiteID, v))
}

// WhamTitle applies equality check predicate on the "wham_title" field. It's identical to WhamTitleEQ.
func WhamTitle(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamTitle, v))
}

// WhanDescription applies equality check predicate on the "whan_description" field. It's identical to WhanDescriptionEQ.
func WhanDescription(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhanDescription, v))
}

// WhamCommunityURL applies equality check predicate on the "wham_community_url" field. It's identical to WhamCommunityURLEQ.
func WhamCommunityURL(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamCommunityURL, v))
}

// WhamCreated applies equality check predicate on the "wham_created" field. It's identical to WhamCreatedEQ.
func WhamCreated(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamCreated, v))
}

// WhamUpdated applies equality check predicate on the "wham_updated" field. It's identical to WhamUpdatedEQ.
func WhamUpdated(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamUpdated, v))
}

// FeaturedFrom applies equality check predicate on the "featured_from" field. It's identical to FeaturedFromEQ.
func FeaturedFrom(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldFeaturedFrom, v))
}

// FeaturedTo applies equality check predicate on the "featured_to" field. It's identical to FeaturedToEQ.
func FeaturedTo(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldFeaturedTo, v))
}

// WhamSiteIDEQ applies the EQ predicate on the "wham_site_id" field.
func WhamSiteIDEQ(v int) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamSiteID, v))
}

// WhamSiteIDNEQ applies the NEQ predicate on the "wham_site_id" field.
func WhamSiteIDNEQ(v int) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldWhamSiteID, v))
}

// WhamSiteIDIn applies the In predicate on the "wham_site_id" field.
func WhamSiteIDIn(vs ...int) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldWhamSiteID, vs...))
}

// WhamSiteIDNotIn applies the NotIn predicate on the "wham_site_id" field.
func WhamSiteIDNotIn(vs ...int) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldWhamSiteID, vs...))
}

// WhamSiteIDGT applies the GT predicate on the "wham_site_id" field.
func WhamSiteIDGT(v int) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldWhamSiteID, v))
}

// WhamSiteIDGTE applies the GTE predicate on the "wham_site_id" field.
func WhamSiteIDGTE(v int) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldWhamSiteID, v))
}

// WhamSiteIDLT applies the LT predicate on the "wham_site_id" field.
func WhamSiteIDLT(v int) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldWhamSiteID, v))
}

// WhamSiteIDLTE applies the LTE predicate on the "wham_site_id" field.
func WhamSiteIDLTE(v int) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldWhamSiteID, v))
}

// WhamTitleEQ applies the EQ predicate on the "wham_title" field.
func WhamTitleEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamTitle, v))
}

// WhamTitleNEQ applies the NEQ predicate on the "wham_title" field.
func WhamTitleNEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldWhamTitle, v))
}

// WhamTitleIn applies the In predicate on the "wham_title" field.
func WhamTitleIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldWhamTitle, vs...))
}

// WhamTitleNotIn applies the NotIn predicate on the "wham_title" field.
func WhamTitleNotIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldWhamTitle, vs...))
}

// WhamTitleGT applies the GT predicate on the "wham_title" field.
func WhamTitleGT(v string) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldWhamTitle, v))
}

// WhamTitleGTE applies the GTE predicate on the "wham_title" field.
func WhamTitleGTE(v string) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldWhamTitle, v))
}

// WhamTitleLT applies the LT predicate on the "wham_title" field.
func WhamTitleLT(v string) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldWhamTitle, v))
}

// WhamTitleLTE applies the LTE predicate on the "wham_title" field.
func WhamTitleLTE(v string) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldWhamTitle, v))
}

// WhamTitleContains applies the Contains predicate on the "wham_title" field.
func WhamTitleContains(v string) predicate.Community {
	return predicate.Community(sql.FieldContains(FieldWhamTitle, v))
}

// WhamTitleHasPrefix applies the HasPrefix predicate on the "wham_title" field.
func WhamTitleHasPrefix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasPrefix(FieldWhamTitle, v))
}

// WhamTitleHasSuffix applies the HasSuffix predicate on the "wham_title" field.
func WhamTitleHasSuffix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasSuffix(FieldWhamTitle, v))
}

// WhamTitleEqualFold applies the EqualFold predicate on the "wham_title" field.
func WhamTitleEqualFold(v string) predicate.Community {
	return predicate.Community(sql.FieldEqualFold(FieldWhamTitle, v))
}

// WhamTitleContainsFold applies the ContainsFold predicate on the "wham_title" field.
func WhamTitleContainsFold(v string) predicate.Community {
	return predicate.Community(sql.FieldContainsFold(FieldWhamTitle, v))
}

// WhanDescriptionEQ applies the EQ predicate on the "whan_description" field.
func WhanDescriptionEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhanDescription, v))
}

// WhanDescriptionNEQ applies the NEQ predicate on the "whan_description" field.
func WhanDescriptionNEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldWhanDescription, v))
}

// WhanDescriptionIn applies the In predicate on the "whan_description" field.
func WhanDescriptionIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldWhanDescription, vs...))
}

// WhanDescriptionNotIn applies the NotIn predicate on the "whan_description" field.
func WhanDescriptionNotIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldWhanDescription, vs...))
}

// WhanDescriptionGT applies the GT predicate on the "whan_description" field.
func WhanDescriptionGT(v string) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldWhanDescription, v))
}

// WhanDescriptionGTE applies the GTE predicate on the "whan_description" field.
func WhanDescriptionGTE(v string) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldWhanDescription, v))
}

// WhanDescriptionLT applies the LT predicate on the "whan_description" field.
func WhanDescriptionLT(v string) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldWhanDescription, v))
}

// WhanDescriptionLTE applies the LTE predicate on the "whan_description" field.
func WhanDescriptionLTE(v string) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldWhanDescription, v))
}

// WhanDescriptionContains applies the Contains predicate on the "whan_description" field.
func WhanDescriptionContains(v string) predicate.Community {
	return predicate.Community(sql.FieldContains(FieldWhanDescription, v))
}

// WhanDescriptionHasPrefix applies the HasPrefix predicate on the "whan_description" field.
func WhanDescriptionHasPrefix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasPrefix(FieldWhanDescription, v))
}

// WhanDescriptionHasSuffix applies the HasSuffix predicate on the "whan_description" field.
func WhanDescriptionHasSuffix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasSuffix(FieldWhanDescription, v))
}

// WhanDescriptionEqualFold applies the EqualFold predicate on the "whan_description" field.
func WhanDescriptionEqualFold(v string) predicate.Community {
	return predicate.Community(sql.FieldEqualFold(FieldWhanDescription, v))
}

// WhanDescriptionContainsFold applies the ContainsFold predicate on the "whan_description" field.
func WhanDescriptionContainsFold(v string) predicate.Community {
	return predicate.Community(sql.FieldContainsFold(FieldWhanDescription, v))
}

// WhamCommunityURLEQ applies the EQ predicate on the "wham_community_url" field.
func WhamCommunityURLEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamCommunityURL, v))
}

// WhamCommunityURLNEQ applies the NEQ predicate on the "wham_community_url" field.
func WhamCommunityURLNEQ(v string) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldWhamCommunityURL, v))
}

// WhamCommunityURLIn applies the In predicate on the "wham_community_url" field.
func WhamCommunityURLIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldWhamCommunityURL, vs...))
}

// WhamCommunityURLNotIn applies the NotIn predicate on the "wham_community_url" field.
func WhamCommunityURLNotIn(vs ...string) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldWhamCommunityURL, vs...))
}

// WhamCommunityURLGT applies the GT predicate on the "wham_community_url" field.
func WhamCommunityURLGT(v string) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldWhamCommunityURL, v))
}

// WhamCommunityURLGTE applies the GTE predicate on the "wham_community_url" field.
func WhamCommunityURLGTE(v string) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldWhamCommunityURL, v))
}

// WhamCommunityURLLT applies the LT predicate on the "wham_community_url" field.
func WhamCommunityURLLT(v string) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldWhamCommunityURL, v))
}

// WhamCommunityURLLTE applies the LTE predicate on the "wham_community_url" field.
func WhamCommunityURLLTE(v string) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldWhamCommunityURL, v))
}

// WhamCommunityURLContains applies the Contains predicate on the "wham_community_url" field.
func WhamCommunityURLContains(v string) predicate.Community {
	return predicate.Community(sql.FieldContains(FieldWhamCommunityURL, v))
}

// WhamCommunityURLHasPrefix applies the HasPrefix predicate on the "wham_community_url" field.
func WhamCommunityURLHasPrefix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasPrefix(FieldWhamCommunityURL, v))
}

// WhamCommunityURLHasSuffix applies the HasSuffix predicate on the "wham_community_url" field.
func WhamCommunityURLHasSuffix(v string) predicate.Community {
	return predicate.Community(sql.FieldHasSuffix(FieldWhamCommunityURL, v))
}

// WhamCommunityURLEqualFold applies the EqualFold predicate on the "wham_community_url" field.
func WhamCommunityURLEqualFold(v string) predicate.Community {
	return predicate.Community(sql.FieldEqualFold(FieldWhamCommunityURL, v))
}

// WhamCommunityURLContainsFold applies the ContainsFold predicate on the "wham_community_url" field.
func WhamCommunityURLContainsFold(v string) predicate.Community {
	return predicate.Community(sql.FieldContainsFold(FieldWhamCommunityURL, v))
}

// WhamCreatedEQ applies the EQ predicate on the "wham_created" field.
func WhamCreatedEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamCreated, v))
}

// WhamCreatedNEQ applies the NEQ predicate on the "wham_created" field.
func WhamCreatedNEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldWhamCreated, v))
}

// WhamCreatedIn applies the In predicate on the "wham_created" field.
func WhamCreatedIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldWhamCreated, vs...))
}

// WhamCreatedNotIn applies the NotIn predicate on the "wham_created" field.
func WhamCreatedNotIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldWhamCreated, vs...))
}

// WhamCreatedGT applies the GT predicate on the "wham_created" field.
func WhamCreatedGT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldWhamCreated, v))
}

// WhamCreatedGTE applies the GTE predicate on the "wham_created" field.
func WhamCreatedGTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldWhamCreated, v))
}

// WhamCreatedLT applies the LT predicate on the "wham_created" field.
func WhamCreatedLT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldWhamCreated, v))
}

// WhamCreatedLTE applies the LTE predicate on the "wham_created" field.
func WhamCreatedLTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldWhamCreated, v))
}

// WhamUpdatedEQ applies the EQ predicate on the "wham_updated" field.
func WhamUpdatedEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldWhamUpdated, v))
}

// WhamUpdatedNEQ applies the NEQ predicate on the "wham_updated" field.
func WhamUpdatedNEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldWhamUpdated, v))
}

// WhamUpdatedIn applies the In predicate on the "wham_updated" field.
func WhamUpdatedIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldWhamUpdated, vs...))
}

// WhamUpdatedNotIn applies the NotIn predicate on the "wham_updated" field.
func WhamUpdatedNotIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldWhamUpdated, vs...))
}

// WhamUpdatedGT applies the GT predicate on the "wham_updated" field.
func WhamUpdatedGT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldWhamUpdated, v))
}

// WhamUpdatedGTE applies the GTE predicate on the "wham_updated" field.
func WhamUpdatedGTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldWhamUpdated, v))
}

// WhamUpdatedLT applies the LT predicate on the "wham_updated" field.
func WhamUpdatedLT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldWhamUpdated, v))
}

// WhamUpdatedLTE applies the LTE predicate on the "wham_updated" field.
func WhamUpdatedLTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldWhamUpdated, v))
}

// FeaturedFromEQ applies the EQ predicate on the "featured_from" field.
func FeaturedFromEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldFeaturedFrom, v))
}

// FeaturedFromNEQ applies the NEQ predicate on the "featured_from" field.
func FeaturedFromNEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldFeaturedFrom, v))
}

// FeaturedFromIn applies the In predicate on the "featured_from" field.
func FeaturedFromIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldFeaturedFrom, vs...))
}

// FeaturedFromNotIn applies the NotIn predicate on the "featured_from" field.
func FeaturedFromNotIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldFeaturedFrom, vs...))
}

// FeaturedFromGT applies the GT predicate on the "featured_from" field.
func FeaturedFromGT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldFeaturedFrom, v))
}

// FeaturedFromGTE applies the GTE predicate on the "featured_from" field.
func FeaturedFromGTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldFeaturedFrom, v))
}

// FeaturedFromLT applies the LT predicate on the "featured_from" field.
func FeaturedFromLT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldFeaturedFrom, v))
}

// FeaturedFromLTE applies the LTE predicate on the "featured_from" field.
func FeaturedFromLTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldFeaturedFrom, v))
}

// FeaturedFromIsNil applies the IsNil predicate on the "featured_from" field.
func FeaturedFromIsNil() predicate.Community {
	return predicate.Community(sql.FieldIsNull(FieldFeaturedFrom))
}

// FeaturedFromNotNil applies the NotNil predicate on the "featured_from" field.
func FeaturedFromNotNil() predicate.Community {
	return predicate.Community(sql.FieldNotNull(FieldFeaturedFrom))
}

// FeaturedToEQ applies the EQ predicate on the "featured_to" field.
func FeaturedToEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldEQ(FieldFeaturedTo, v))
}

// FeaturedToNEQ applies the NEQ predicate on the "featured_to" field.
func FeaturedToNEQ(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldNEQ(FieldFeaturedTo, v))
}

// FeaturedToIn applies the In predicate on the "featured_to" field.
func FeaturedToIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldIn(FieldFeaturedTo, vs...))
}

// FeaturedToNotIn applies the NotIn predicate on the "featured_to" field.
func FeaturedToNotIn(vs ...time.Time) predicate.Community {
	return predicate.Community(sql.FieldNotIn(FieldFeaturedTo, vs...))
}

// FeaturedToGT applies the GT predicate on the "featured_to" field.
func FeaturedToGT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGT(FieldFeaturedTo, v))
}

// FeaturedToGTE applies the GTE predicate on the "featured_to" field.
func FeaturedToGTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldGTE(FieldFeaturedTo, v))
}

// FeaturedToLT applies the LT predicate on the "featured_to" field.
func FeaturedToLT(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLT(FieldFeaturedTo, v))
}

// FeaturedToLTE applies the LTE predicate on the "featured_to" field.
func FeaturedToLTE(v time.Time) predicate.Community {
	return predicate.Community(sql.FieldLTE(FieldFeaturedTo, v))
}

// FeaturedToIsNil applies the IsNil predicate on the "featured_to" field.
func FeaturedToIsNil() predicate.Community {
	return predicate.Community(sql.FieldIsNull(FieldFeaturedTo))
}

// FeaturedToNotNil applies the NotNil predicate on the "featured_to" field.
func FeaturedToNotNil() predicate.Community {
	return predicate.Community(sql.FieldNotNull(FieldFeaturedTo))
}

// HasAdgroup applies the HasEdge predicate on the "adgroup" edge.
func HasAdgroup() predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AdgroupTable, AdgroupPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdgroupWith applies the HasEdge predicate on the "adgroup" edge with a given conditions (other predicates).
func HasAdgroupWith(preds ...predicate.ADGroup) predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := newAdgroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommunityCategory applies the HasEdge predicate on the "community_category" edge.
func HasCommunityCategory() predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CommunityCategoryTable, CommunityCategoryPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommunityCategoryWith applies the HasEdge predicate on the "community_category" edge with a given conditions (other predicates).
func HasCommunityCategoryWith(preds ...predicate.CommunityCategory) predicate.Community {
	return predicate.Community(func(s *sql.Selector) {
		step := newCommunityCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Community) predicate.Community {
	return predicate.Community(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Community) predicate.Community {
	return predicate.Community(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Community) predicate.Community {
	return predicate.Community(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dbapp/ent/partner"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Partner is the model entity for the Partner schema.
type Partner struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// WhamSiteID holds the value of the "wham_site_id" field.
	WhamSiteID int `json:"wham_site_id,omitempty"`
	// WhamTitle holds the value of the "wham_title" field.
	WhamTitle string `json:"wham_title,omitempty"`
	// WhamDescription holds the value of the "wham_description" field.
	WhamDescription string `json:"wham_description,omitempty"`
	// KeycloakOrganisation holds the value of the "keycloak_organisation" field.
	KeycloakOrganisation string `json:"keycloak_organisation,omitempty"`
	// WhamPartnerURL holds the value of the "wham_partner_url" field.
	WhamPartnerURL string `json:"wham_partner_url,omitempty"`
	// WhamCreated holds the value of the "wham_created" field.
	WhamCreated time.Time `json:"wham_created,omitempty"`
	// WhamUpdated holds the value of the "wham_updated" field.
	WhamUpdated time.Time `json:"wham_updated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartnerQuery when eager-loading is set.
	Edges        PartnerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PartnerEdges holds the relations/edges for other nodes in the graph.
type PartnerEdges struct {
	// Application holds the value of the application edge.
	Application []*Application `json:"application,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApplicationOrErr returns the Application value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) ApplicationOrErr() ([]*Application, error) {
	if e.loadedTypes[0] {
		return e.Application, nil
	}
	return nil, &NotLoadedError{edge: "application"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Partner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case partner.FieldWhamSiteID:
			values[i] = new(sql.NullInt64)
		case partner.FieldWhamTitle, partner.FieldWhamDescription, partner.FieldKeycloakOrganisation, partner.FieldWhamPartnerURL:
			values[i] = new(sql.NullString)
		case partner.FieldWhamCreated, partner.FieldWhamUpdated:
			values[i] = new(sql.NullTime)
		case partner.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Partner fields.
func (pa *Partner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partner.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case partner.FieldWhamSiteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wham_site_id", values[i])
			} else if value.Valid {
				pa.WhamSiteID = int(value.Int64)
			}
		case partner.FieldWhamTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wham_title", values[i])
			} else if value.Valid {
				pa.WhamTitle = value.String
			}
		case partner.FieldWhamDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wham_description", values[i])
			} else if value.Valid {
				pa.WhamDescription = value.String
			}
		case partner.FieldKeycloakOrganisation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keycloak_organisation", values[i])
			} else if value.Valid {
				pa.KeycloakOrganisation = value.String
			}
		case partner.FieldWhamPartnerURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wham_partner_url", values[i])
			} else if value.Valid {
				pa.WhamPartnerURL = value.String
			}
		case partner.FieldWhamCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field wham_created", values[i])
			} else if value.Valid {
				pa.WhamCreated = value.Time
			}
		case partner.FieldWhamUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field wham_updated", values[i])
			} else if value.Valid {
				pa.WhamUpdated = value.Time
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Partner.
// This includes values selected through modifiers, order, etc.
func (pa *Partner) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryApplication queries the "application" edge of the Partner entity.
func (pa *Partner) QueryApplication() *ApplicationQuery {
	return NewPartnerClient(pa.config).QueryApplication(pa)
}

// Update returns a builder for updating this Partner.
// Note that you need to call Partner.Unwrap() before calling this method if this Partner
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Partner) Update() *PartnerUpdateOne {
	return NewPartnerClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Partner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Partner) Unwrap() *Partner {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Partner is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Partner) String() string {
	var builder strings.Builder
	builder.WriteString("Partner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("wham_site_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.WhamSiteID))
	builder.WriteString(", ")
	builder.WriteString("wham_title=")
	builder.WriteString(pa.WhamTitle)
	builder.WriteString(", ")
	builder.WriteString("wham_description=")
	builder.WriteString(pa.WhamDescription)
	builder.WriteString(", ")
	builder.WriteString("keycloak_organisation=")
	builder.WriteString(pa.KeycloakOrganisation)
	builder.WriteString(", ")
	builder.WriteString("wham_partner_url=")
	builder.WriteString(pa.WhamPartnerURL)
	builder.WriteString(", ")
	builder.WriteString("wham_created=")
	builder.WriteString(pa.WhamCreated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("wham_updated=")
	builder.WriteString(pa.WhamUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Partners is a parsable slice of Partner.
type Partners []*Partner

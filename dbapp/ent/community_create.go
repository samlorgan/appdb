// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/adgroup"
	"dbapp/ent/community"
	"dbapp/ent/communitycategory"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CommunityCreate is the builder for creating a Community entity.
type CommunityCreate struct {
	config
	mutation *CommunityMutation
	hooks    []Hook
}

// SetWhamSiteID sets the "wham_site_id" field.
func (cc *CommunityCreate) SetWhamSiteID(i int) *CommunityCreate {
	cc.mutation.SetWhamSiteID(i)
	return cc
}

// SetWhamTitle sets the "wham_title" field.
func (cc *CommunityCreate) SetWhamTitle(s string) *CommunityCreate {
	cc.mutation.SetWhamTitle(s)
	return cc
}

// SetWhanDescription sets the "whan_description" field.
func (cc *CommunityCreate) SetWhanDescription(s string) *CommunityCreate {
	cc.mutation.SetWhanDescription(s)
	return cc
}

// SetWhamCommunityURL sets the "wham_community_url" field.
func (cc *CommunityCreate) SetWhamCommunityURL(s string) *CommunityCreate {
	cc.mutation.SetWhamCommunityURL(s)
	return cc
}

// SetWhamCreated sets the "wham_created" field.
func (cc *CommunityCreate) SetWhamCreated(t time.Time) *CommunityCreate {
	cc.mutation.SetWhamCreated(t)
	return cc
}

// SetWhamUpdated sets the "wham_updated" field.
func (cc *CommunityCreate) SetWhamUpdated(t time.Time) *CommunityCreate {
	cc.mutation.SetWhamUpdated(t)
	return cc
}

// SetFeaturedFrom sets the "featured_from" field.
func (cc *CommunityCreate) SetFeaturedFrom(t time.Time) *CommunityCreate {
	cc.mutation.SetFeaturedFrom(t)
	return cc
}

// SetNillableFeaturedFrom sets the "featured_from" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableFeaturedFrom(t *time.Time) *CommunityCreate {
	if t != nil {
		cc.SetFeaturedFrom(*t)
	}
	return cc
}

// SetFeaturedTo sets the "featured_to" field.
func (cc *CommunityCreate) SetFeaturedTo(t time.Time) *CommunityCreate {
	cc.mutation.SetFeaturedTo(t)
	return cc
}

// SetNillableFeaturedTo sets the "featured_to" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableFeaturedTo(t *time.Time) *CommunityCreate {
	if t != nil {
		cc.SetFeaturedTo(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CommunityCreate) SetID(u uuid.UUID) *CommunityCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableID(u *uuid.UUID) *CommunityCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddAdgroupIDs adds the "adgroup" edge to the ADGroup entity by IDs.
func (cc *CommunityCreate) AddAdgroupIDs(ids ...uuid.UUID) *CommunityCreate {
	cc.mutation.AddAdgroupIDs(ids...)
	return cc
}

// AddAdgroup adds the "adgroup" edges to the ADGroup entity.
func (cc *CommunityCreate) AddAdgroup(a ...*ADGroup) *CommunityCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddAdgroupIDs(ids...)
}

// AddCommunityCategoryIDs adds the "community_category" edge to the CommunityCategory entity by IDs.
func (cc *CommunityCreate) AddCommunityCategoryIDs(ids ...uuid.UUID) *CommunityCreate {
	cc.mutation.AddCommunityCategoryIDs(ids...)
	return cc
}

// AddCommunityCategory adds the "community_category" edges to the CommunityCategory entity.
func (cc *CommunityCreate) AddCommunityCategory(c ...*CommunityCategory) *CommunityCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCommunityCategoryIDs(ids...)
}

// Mutation returns the CommunityMutation object of the builder.
func (cc *CommunityCreate) Mutation() *CommunityMutation {
	return cc.mutation
}

// Save creates the Community in the database.
func (cc *CommunityCreate) Save(ctx context.Context) (*Community, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommunityCreate) SaveX(ctx context.Context) *Community {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommunityCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommunityCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommunityCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := community.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommunityCreate) check() error {
	if _, ok := cc.mutation.WhamSiteID(); !ok {
		return &ValidationError{Name: "wham_site_id", err: errors.New(`ent: missing required field "Community.wham_site_id"`)}
	}
	if _, ok := cc.mutation.WhamTitle(); !ok {
		return &ValidationError{Name: "wham_title", err: errors.New(`ent: missing required field "Community.wham_title"`)}
	}
	if _, ok := cc.mutation.WhanDescription(); !ok {
		return &ValidationError{Name: "whan_description", err: errors.New(`ent: missing required field "Community.whan_description"`)}
	}
	if _, ok := cc.mutation.WhamCommunityURL(); !ok {
		return &ValidationError{Name: "wham_community_url", err: errors.New(`ent: missing required field "Community.wham_community_url"`)}
	}
	if _, ok := cc.mutation.WhamCreated(); !ok {
		return &ValidationError{Name: "wham_created", err: errors.New(`ent: missing required field "Community.wham_created"`)}
	}
	if _, ok := cc.mutation.WhamUpdated(); !ok {
		return &ValidationError{Name: "wham_updated", err: errors.New(`ent: missing required field "Community.wham_updated"`)}
	}
	return nil
}

func (cc *CommunityCreate) sqlSave(ctx context.Context) (*Community, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CommunityCreate) createSpec() (*Community, *sqlgraph.CreateSpec) {
	var (
		_node = &Community{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(community.Table, sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.WhamSiteID(); ok {
		_spec.SetField(community.FieldWhamSiteID, field.TypeInt, value)
		_node.WhamSiteID = value
	}
	if value, ok := cc.mutation.WhamTitle(); ok {
		_spec.SetField(community.FieldWhamTitle, field.TypeString, value)
		_node.WhamTitle = value
	}
	if value, ok := cc.mutation.WhanDescription(); ok {
		_spec.SetField(community.FieldWhanDescription, field.TypeString, value)
		_node.WhanDescription = value
	}
	if value, ok := cc.mutation.WhamCommunityURL(); ok {
		_spec.SetField(community.FieldWhamCommunityURL, field.TypeString, value)
		_node.WhamCommunityURL = value
	}
	if value, ok := cc.mutation.WhamCreated(); ok {
		_spec.SetField(community.FieldWhamCreated, field.TypeTime, value)
		_node.WhamCreated = value
	}
	if value, ok := cc.mutation.WhamUpdated(); ok {
		_spec.SetField(community.FieldWhamUpdated, field.TypeTime, value)
		_node.WhamUpdated = value
	}
	if value, ok := cc.mutation.FeaturedFrom(); ok {
		_spec.SetField(community.FieldFeaturedFrom, field.TypeTime, value)
		_node.FeaturedFrom = value
	}
	if value, ok := cc.mutation.FeaturedTo(); ok {
		_spec.SetField(community.FieldFeaturedTo, field.TypeTime, value)
		_node.FeaturedTo = value
	}
	if nodes := cc.mutation.AdgroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AdgroupTable,
			Columns: community.AdgroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CommunityCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CommunityCategoryTable,
			Columns: community.CommunityCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communitycategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommunityCreateBulk is the builder for creating many Community entities in bulk.
type CommunityCreateBulk struct {
	config
	err      error
	builders []*CommunityCreate
}

// Save creates the Community entities in the database.
func (ccb *CommunityCreateBulk) Save(ctx context.Context) ([]*Community, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Community, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommunityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommunityCreateBulk) SaveX(ctx context.Context) []*Community {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommunityCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommunityCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

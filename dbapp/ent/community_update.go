// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/adgroup"
	"dbapp/ent/community"
	"dbapp/ent/communitycategory"
	"dbapp/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CommunityUpdate is the builder for updating Community entities.
type CommunityUpdate struct {
	config
	hooks    []Hook
	mutation *CommunityMutation
}

// Where appends a list predicates to the CommunityUpdate builder.
func (cu *CommunityUpdate) Where(ps ...predicate.Community) *CommunityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetWhamSiteID sets the "wham_site_id" field.
func (cu *CommunityUpdate) SetWhamSiteID(i int) *CommunityUpdate {
	cu.mutation.ResetWhamSiteID()
	cu.mutation.SetWhamSiteID(i)
	return cu
}

// SetNillableWhamSiteID sets the "wham_site_id" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableWhamSiteID(i *int) *CommunityUpdate {
	if i != nil {
		cu.SetWhamSiteID(*i)
	}
	return cu
}

// AddWhamSiteID adds i to the "wham_site_id" field.
func (cu *CommunityUpdate) AddWhamSiteID(i int) *CommunityUpdate {
	cu.mutation.AddWhamSiteID(i)
	return cu
}

// SetWhamTitle sets the "wham_title" field.
func (cu *CommunityUpdate) SetWhamTitle(s string) *CommunityUpdate {
	cu.mutation.SetWhamTitle(s)
	return cu
}

// SetNillableWhamTitle sets the "wham_title" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableWhamTitle(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetWhamTitle(*s)
	}
	return cu
}

// SetWhanDescription sets the "whan_description" field.
func (cu *CommunityUpdate) SetWhanDescription(s string) *CommunityUpdate {
	cu.mutation.SetWhanDescription(s)
	return cu
}

// SetNillableWhanDescription sets the "whan_description" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableWhanDescription(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetWhanDescription(*s)
	}
	return cu
}

// SetWhamCommunityURL sets the "wham_community_url" field.
func (cu *CommunityUpdate) SetWhamCommunityURL(s string) *CommunityUpdate {
	cu.mutation.SetWhamCommunityURL(s)
	return cu
}

// SetNillableWhamCommunityURL sets the "wham_community_url" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableWhamCommunityURL(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetWhamCommunityURL(*s)
	}
	return cu
}

// SetWhamCreated sets the "wham_created" field.
func (cu *CommunityUpdate) SetWhamCreated(t time.Time) *CommunityUpdate {
	cu.mutation.SetWhamCreated(t)
	return cu
}

// SetNillableWhamCreated sets the "wham_created" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableWhamCreated(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetWhamCreated(*t)
	}
	return cu
}

// SetWhamUpdated sets the "wham_updated" field.
func (cu *CommunityUpdate) SetWhamUpdated(t time.Time) *CommunityUpdate {
	cu.mutation.SetWhamUpdated(t)
	return cu
}

// SetNillableWhamUpdated sets the "wham_updated" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableWhamUpdated(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetWhamUpdated(*t)
	}
	return cu
}

// SetFeaturedFrom sets the "featured_from" field.
func (cu *CommunityUpdate) SetFeaturedFrom(t time.Time) *CommunityUpdate {
	cu.mutation.SetFeaturedFrom(t)
	return cu
}

// SetNillableFeaturedFrom sets the "featured_from" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableFeaturedFrom(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetFeaturedFrom(*t)
	}
	return cu
}

// ClearFeaturedFrom clears the value of the "featured_from" field.
func (cu *CommunityUpdate) ClearFeaturedFrom() *CommunityUpdate {
	cu.mutation.ClearFeaturedFrom()
	return cu
}

// SetFeaturedTo sets the "featured_to" field.
func (cu *CommunityUpdate) SetFeaturedTo(t time.Time) *CommunityUpdate {
	cu.mutation.SetFeaturedTo(t)
	return cu
}

// SetNillableFeaturedTo sets the "featured_to" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableFeaturedTo(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetFeaturedTo(*t)
	}
	return cu
}

// ClearFeaturedTo clears the value of the "featured_to" field.
func (cu *CommunityUpdate) ClearFeaturedTo() *CommunityUpdate {
	cu.mutation.ClearFeaturedTo()
	return cu
}

// AddAdgroupIDs adds the "adgroup" edge to the ADGroup entity by IDs.
func (cu *CommunityUpdate) AddAdgroupIDs(ids ...uuid.UUID) *CommunityUpdate {
	cu.mutation.AddAdgroupIDs(ids...)
	return cu
}

// AddAdgroup adds the "adgroup" edges to the ADGroup entity.
func (cu *CommunityUpdate) AddAdgroup(a ...*ADGroup) *CommunityUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAdgroupIDs(ids...)
}

// AddCommunityCategoryIDs adds the "community_category" edge to the CommunityCategory entity by IDs.
func (cu *CommunityUpdate) AddCommunityCategoryIDs(ids ...uuid.UUID) *CommunityUpdate {
	cu.mutation.AddCommunityCategoryIDs(ids...)
	return cu
}

// AddCommunityCategory adds the "community_category" edges to the CommunityCategory entity.
func (cu *CommunityUpdate) AddCommunityCategory(c ...*CommunityCategory) *CommunityUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCommunityCategoryIDs(ids...)
}

// Mutation returns the CommunityMutation object of the builder.
func (cu *CommunityUpdate) Mutation() *CommunityMutation {
	return cu.mutation
}

// ClearAdgroup clears all "adgroup" edges to the ADGroup entity.
func (cu *CommunityUpdate) ClearAdgroup() *CommunityUpdate {
	cu.mutation.ClearAdgroup()
	return cu
}

// RemoveAdgroupIDs removes the "adgroup" edge to ADGroup entities by IDs.
func (cu *CommunityUpdate) RemoveAdgroupIDs(ids ...uuid.UUID) *CommunityUpdate {
	cu.mutation.RemoveAdgroupIDs(ids...)
	return cu
}

// RemoveAdgroup removes "adgroup" edges to ADGroup entities.
func (cu *CommunityUpdate) RemoveAdgroup(a ...*ADGroup) *CommunityUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAdgroupIDs(ids...)
}

// ClearCommunityCategory clears all "community_category" edges to the CommunityCategory entity.
func (cu *CommunityUpdate) ClearCommunityCategory() *CommunityUpdate {
	cu.mutation.ClearCommunityCategory()
	return cu
}

// RemoveCommunityCategoryIDs removes the "community_category" edge to CommunityCategory entities by IDs.
func (cu *CommunityUpdate) RemoveCommunityCategoryIDs(ids ...uuid.UUID) *CommunityUpdate {
	cu.mutation.RemoveCommunityCategoryIDs(ids...)
	return cu
}

// RemoveCommunityCategory removes "community_category" edges to CommunityCategory entities.
func (cu *CommunityUpdate) RemoveCommunityCategory(c ...*CommunityCategory) *CommunityUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCommunityCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommunityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommunityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommunityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommunityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CommunityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(community.Table, community.Columns, sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.WhamSiteID(); ok {
		_spec.SetField(community.FieldWhamSiteID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedWhamSiteID(); ok {
		_spec.AddField(community.FieldWhamSiteID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.WhamTitle(); ok {
		_spec.SetField(community.FieldWhamTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.WhanDescription(); ok {
		_spec.SetField(community.FieldWhanDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.WhamCommunityURL(); ok {
		_spec.SetField(community.FieldWhamCommunityURL, field.TypeString, value)
	}
	if value, ok := cu.mutation.WhamCreated(); ok {
		_spec.SetField(community.FieldWhamCreated, field.TypeTime, value)
	}
	if value, ok := cu.mutation.WhamUpdated(); ok {
		_spec.SetField(community.FieldWhamUpdated, field.TypeTime, value)
	}
	if value, ok := cu.mutation.FeaturedFrom(); ok {
		_spec.SetField(community.FieldFeaturedFrom, field.TypeTime, value)
	}
	if cu.mutation.FeaturedFromCleared() {
		_spec.ClearField(community.FieldFeaturedFrom, field.TypeTime)
	}
	if value, ok := cu.mutation.FeaturedTo(); ok {
		_spec.SetField(community.FieldFeaturedTo, field.TypeTime, value)
	}
	if cu.mutation.FeaturedToCleared() {
		_spec.ClearField(community.FieldFeaturedTo, field.TypeTime)
	}
	if cu.mutation.AdgroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AdgroupTable,
			Columns: community.AdgroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adgroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAdgroupIDs(); len(nodes) > 0 && !cu.mutation.AdgroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AdgroupTable,
			Columns: community.AdgroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AdgroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AdgroupTable,
			Columns: community.AdgroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CommunityCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CommunityCategoryTable,
			Columns: community.CommunityCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communitycategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCommunityCategoryIDs(); len(nodes) > 0 && !cu.mutation.CommunityCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CommunityCategoryTable,
			Columns: community.CommunityCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communitycategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CommunityCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CommunityCategoryTable,
			Columns: community.CommunityCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communitycategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommunityUpdateOne is the builder for updating a single Community entity.
type CommunityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunityMutation
}

// SetWhamSiteID sets the "wham_site_id" field.
func (cuo *CommunityUpdateOne) SetWhamSiteID(i int) *CommunityUpdateOne {
	cuo.mutation.ResetWhamSiteID()
	cuo.mutation.SetWhamSiteID(i)
	return cuo
}

// SetNillableWhamSiteID sets the "wham_site_id" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableWhamSiteID(i *int) *CommunityUpdateOne {
	if i != nil {
		cuo.SetWhamSiteID(*i)
	}
	return cuo
}

// AddWhamSiteID adds i to the "wham_site_id" field.
func (cuo *CommunityUpdateOne) AddWhamSiteID(i int) *CommunityUpdateOne {
	cuo.mutation.AddWhamSiteID(i)
	return cuo
}

// SetWhamTitle sets the "wham_title" field.
func (cuo *CommunityUpdateOne) SetWhamTitle(s string) *CommunityUpdateOne {
	cuo.mutation.SetWhamTitle(s)
	return cuo
}

// SetNillableWhamTitle sets the "wham_title" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableWhamTitle(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetWhamTitle(*s)
	}
	return cuo
}

// SetWhanDescription sets the "whan_description" field.
func (cuo *CommunityUpdateOne) SetWhanDescription(s string) *CommunityUpdateOne {
	cuo.mutation.SetWhanDescription(s)
	return cuo
}

// SetNillableWhanDescription sets the "whan_description" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableWhanDescription(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetWhanDescription(*s)
	}
	return cuo
}

// SetWhamCommunityURL sets the "wham_community_url" field.
func (cuo *CommunityUpdateOne) SetWhamCommunityURL(s string) *CommunityUpdateOne {
	cuo.mutation.SetWhamCommunityURL(s)
	return cuo
}

// SetNillableWhamCommunityURL sets the "wham_community_url" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableWhamCommunityURL(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetWhamCommunityURL(*s)
	}
	return cuo
}

// SetWhamCreated sets the "wham_created" field.
func (cuo *CommunityUpdateOne) SetWhamCreated(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetWhamCreated(t)
	return cuo
}

// SetNillableWhamCreated sets the "wham_created" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableWhamCreated(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetWhamCreated(*t)
	}
	return cuo
}

// SetWhamUpdated sets the "wham_updated" field.
func (cuo *CommunityUpdateOne) SetWhamUpdated(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetWhamUpdated(t)
	return cuo
}

// SetNillableWhamUpdated sets the "wham_updated" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableWhamUpdated(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetWhamUpdated(*t)
	}
	return cuo
}

// SetFeaturedFrom sets the "featured_from" field.
func (cuo *CommunityUpdateOne) SetFeaturedFrom(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetFeaturedFrom(t)
	return cuo
}

// SetNillableFeaturedFrom sets the "featured_from" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableFeaturedFrom(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetFeaturedFrom(*t)
	}
	return cuo
}

// ClearFeaturedFrom clears the value of the "featured_from" field.
func (cuo *CommunityUpdateOne) ClearFeaturedFrom() *CommunityUpdateOne {
	cuo.mutation.ClearFeaturedFrom()
	return cuo
}

// SetFeaturedTo sets the "featured_to" field.
func (cuo *CommunityUpdateOne) SetFeaturedTo(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetFeaturedTo(t)
	return cuo
}

// SetNillableFeaturedTo sets the "featured_to" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableFeaturedTo(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetFeaturedTo(*t)
	}
	return cuo
}

// ClearFeaturedTo clears the value of the "featured_to" field.
func (cuo *CommunityUpdateOne) ClearFeaturedTo() *CommunityUpdateOne {
	cuo.mutation.ClearFeaturedTo()
	return cuo
}

// AddAdgroupIDs adds the "adgroup" edge to the ADGroup entity by IDs.
func (cuo *CommunityUpdateOne) AddAdgroupIDs(ids ...uuid.UUID) *CommunityUpdateOne {
	cuo.mutation.AddAdgroupIDs(ids...)
	return cuo
}

// AddAdgroup adds the "adgroup" edges to the ADGroup entity.
func (cuo *CommunityUpdateOne) AddAdgroup(a ...*ADGroup) *CommunityUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAdgroupIDs(ids...)
}

// AddCommunityCategoryIDs adds the "community_category" edge to the CommunityCategory entity by IDs.
func (cuo *CommunityUpdateOne) AddCommunityCategoryIDs(ids ...uuid.UUID) *CommunityUpdateOne {
	cuo.mutation.AddCommunityCategoryIDs(ids...)
	return cuo
}

// AddCommunityCategory adds the "community_category" edges to the CommunityCategory entity.
func (cuo *CommunityUpdateOne) AddCommunityCategory(c ...*CommunityCategory) *CommunityUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCommunityCategoryIDs(ids...)
}

// Mutation returns the CommunityMutation object of the builder.
func (cuo *CommunityUpdateOne) Mutation() *CommunityMutation {
	return cuo.mutation
}

// ClearAdgroup clears all "adgroup" edges to the ADGroup entity.
func (cuo *CommunityUpdateOne) ClearAdgroup() *CommunityUpdateOne {
	cuo.mutation.ClearAdgroup()
	return cuo
}

// RemoveAdgroupIDs removes the "adgroup" edge to ADGroup entities by IDs.
func (cuo *CommunityUpdateOne) RemoveAdgroupIDs(ids ...uuid.UUID) *CommunityUpdateOne {
	cuo.mutation.RemoveAdgroupIDs(ids...)
	return cuo
}

// RemoveAdgroup removes "adgroup" edges to ADGroup entities.
func (cuo *CommunityUpdateOne) RemoveAdgroup(a ...*ADGroup) *CommunityUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAdgroupIDs(ids...)
}

// ClearCommunityCategory clears all "community_category" edges to the CommunityCategory entity.
func (cuo *CommunityUpdateOne) ClearCommunityCategory() *CommunityUpdateOne {
	cuo.mutation.ClearCommunityCategory()
	return cuo
}

// RemoveCommunityCategoryIDs removes the "community_category" edge to CommunityCategory entities by IDs.
func (cuo *CommunityUpdateOne) RemoveCommunityCategoryIDs(ids ...uuid.UUID) *CommunityUpdateOne {
	cuo.mutation.RemoveCommunityCategoryIDs(ids...)
	return cuo
}

// RemoveCommunityCategory removes "community_category" edges to CommunityCategory entities.
func (cuo *CommunityUpdateOne) RemoveCommunityCategory(c ...*CommunityCategory) *CommunityUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCommunityCategoryIDs(ids...)
}

// Where appends a list predicates to the CommunityUpdate builder.
func (cuo *CommunityUpdateOne) Where(ps ...predicate.Community) *CommunityUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommunityUpdateOne) Select(field string, fields ...string) *CommunityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Community entity.
func (cuo *CommunityUpdateOne) Save(ctx context.Context) (*Community, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommunityUpdateOne) SaveX(ctx context.Context) *Community {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommunityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommunityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CommunityUpdateOne) sqlSave(ctx context.Context) (_node *Community, err error) {
	_spec := sqlgraph.NewUpdateSpec(community.Table, community.Columns, sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Community.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, community.FieldID)
		for _, f := range fields {
			if !community.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != community.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.WhamSiteID(); ok {
		_spec.SetField(community.FieldWhamSiteID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedWhamSiteID(); ok {
		_spec.AddField(community.FieldWhamSiteID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.WhamTitle(); ok {
		_spec.SetField(community.FieldWhamTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.WhanDescription(); ok {
		_spec.SetField(community.FieldWhanDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.WhamCommunityURL(); ok {
		_spec.SetField(community.FieldWhamCommunityURL, field.TypeString, value)
	}
	if value, ok := cuo.mutation.WhamCreated(); ok {
		_spec.SetField(community.FieldWhamCreated, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.WhamUpdated(); ok {
		_spec.SetField(community.FieldWhamUpdated, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.FeaturedFrom(); ok {
		_spec.SetField(community.FieldFeaturedFrom, field.TypeTime, value)
	}
	if cuo.mutation.FeaturedFromCleared() {
		_spec.ClearField(community.FieldFeaturedFrom, field.TypeTime)
	}
	if value, ok := cuo.mutation.FeaturedTo(); ok {
		_spec.SetField(community.FieldFeaturedTo, field.TypeTime, value)
	}
	if cuo.mutation.FeaturedToCleared() {
		_spec.ClearField(community.FieldFeaturedTo, field.TypeTime)
	}
	if cuo.mutation.AdgroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AdgroupTable,
			Columns: community.AdgroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adgroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAdgroupIDs(); len(nodes) > 0 && !cuo.mutation.AdgroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AdgroupTable,
			Columns: community.AdgroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AdgroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.AdgroupTable,
			Columns: community.AdgroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CommunityCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CommunityCategoryTable,
			Columns: community.CommunityCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communitycategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCommunityCategoryIDs(); len(nodes) > 0 && !cuo.mutation.CommunityCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CommunityCategoryTable,
			Columns: community.CommunityCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communitycategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CommunityCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   community.CommunityCategoryTable,
			Columns: community.CommunityCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(communitycategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Community{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

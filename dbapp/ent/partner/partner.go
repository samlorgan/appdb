// Code generated by ent, DO NOT EDIT.

package partner

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the partner type in the database.
	Label = "partner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWhamSiteID holds the string denoting the wham_site_id field in the database.
	FieldWhamSiteID = "wham_site_id"
	// FieldWhamTitle holds the string denoting the wham_title field in the database.
	FieldWhamTitle = "wham_title"
	// FieldWhamDescription holds the string denoting the wham_description field in the database.
	FieldWhamDescription = "wham_description"
	// FieldKeycloakOrganisation holds the string denoting the keycloak_organisation field in the database.
	FieldKeycloakOrganisation = "keycloak_organisation"
	// FieldWhamPartnerURL holds the string denoting the wham_partner_url field in the database.
	FieldWhamPartnerURL = "wham_partner_url"
	// FieldWhamCreated holds the string denoting the wham_created field in the database.
	FieldWhamCreated = "wham_created"
	// FieldWhamUpdated holds the string denoting the wham_updated field in the database.
	FieldWhamUpdated = "wham_updated"
	// EdgeApplication holds the string denoting the application edge name in mutations.
	EdgeApplication = "application"
	// Table holds the table name of the partner in the database.
	Table = "partners"
	// ApplicationTable is the table that holds the application relation/edge. The primary key declared below.
	ApplicationTable = "application_partner_access"
	// ApplicationInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationInverseTable = "applications"
)

// Columns holds all SQL columns for partner fields.
var Columns = []string{
	FieldID,
	FieldWhamSiteID,
	FieldWhamTitle,
	FieldWhamDescription,
	FieldKeycloakOrganisation,
	FieldWhamPartnerURL,
	FieldWhamCreated,
	FieldWhamUpdated,
}

var (
	// ApplicationPrimaryKey and ApplicationColumn2 are the table columns denoting the
	// primary key for the application relation (M2M).
	ApplicationPrimaryKey = []string{"application_id", "partner_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Partner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWhamSiteID orders the results by the wham_site_id field.
func ByWhamSiteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamSiteID, opts...).ToFunc()
}

// ByWhamTitle orders the results by the wham_title field.
func ByWhamTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamTitle, opts...).ToFunc()
}

// ByWhamDescription orders the results by the wham_description field.
func ByWhamDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamDescription, opts...).ToFunc()
}

// ByKeycloakOrganisation orders the results by the keycloak_organisation field.
func ByKeycloakOrganisation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeycloakOrganisation, opts...).ToFunc()
}

// ByWhamPartnerURL orders the results by the wham_partner_url field.
func ByWhamPartnerURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamPartnerURL, opts...).ToFunc()
}

// ByWhamCreated orders the results by the wham_created field.
func ByWhamCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamCreated, opts...).ToFunc()
}

// ByWhamUpdated orders the results by the wham_updated field.
func ByWhamUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamUpdated, opts...).ToFunc()
}

// ByApplicationCount orders the results by application count.
func ByApplicationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationStep(), opts...)
	}
}

// ByApplication orders the results by application terms.
func ByApplication(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ApplicationTable, ApplicationPrimaryKey...),
	)
}

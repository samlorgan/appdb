// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/adgroup"
	"dbapp/ent/application"
	"dbapp/ent/applicationcategory"
	"dbapp/ent/community"
	"dbapp/ent/communitycategory"
	"dbapp/ent/partner"
	"dbapp/ent/partnerpagelinkfragment"
	"dbapp/ent/predicate"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeADGroup                 = "ADGroup"
	TypeApplication             = "Application"
	TypeApplicationCategory     = "ApplicationCategory"
	TypeCommunity               = "Community"
	TypeCommunityCategory       = "CommunityCategory"
	TypePartner                 = "Partner"
	TypePartnerPageLinkFragment = "PartnerPageLinkFragment"
)

// ADGroupMutation represents an operation that mutates the ADGroup nodes in the graph.
type ADGroupMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	name             *string
	clearedFields    map[string]struct{}
	community        map[uuid.UUID]struct{}
	removedcommunity map[uuid.UUID]struct{}
	clearedcommunity bool
	done             bool
	oldValue         func(context.Context) (*ADGroup, error)
	predicates       []predicate.ADGroup
}

var _ ent.Mutation = (*ADGroupMutation)(nil)

// adgroupOption allows management of the mutation configuration using functional options.
type adgroupOption func(*ADGroupMutation)

// newADGroupMutation creates new mutation for the ADGroup entity.
func newADGroupMutation(c config, op Op, opts ...adgroupOption) *ADGroupMutation {
	m := &ADGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeADGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withADGroupID sets the ID field of the mutation.
func withADGroupID(id uuid.UUID) adgroupOption {
	return func(m *ADGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *ADGroup
		)
		m.oldValue = func(ctx context.Context) (*ADGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ADGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withADGroup sets the old ADGroup of the mutation.
func withADGroup(node *ADGroup) adgroupOption {
	return func(m *ADGroupMutation) {
		m.oldValue = func(context.Context) (*ADGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ADGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ADGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ADGroup entities.
func (m *ADGroupMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ADGroupMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ADGroupMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ADGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ADGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ADGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ADGroup entity.
// If the ADGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ADGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ADGroupMutation) ResetName() {
	m.name = nil
}

// AddCommunityIDs adds the "community" edge to the Community entity by ids.
func (m *ADGroupMutation) AddCommunityIDs(ids ...uuid.UUID) {
	if m.community == nil {
		m.community = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.community[ids[i]] = struct{}{}
	}
}

// ClearCommunity clears the "community" edge to the Community entity.
func (m *ADGroupMutation) ClearCommunity() {
	m.clearedcommunity = true
}

// CommunityCleared reports if the "community" edge to the Community entity was cleared.
func (m *ADGroupMutation) CommunityCleared() bool {
	return m.clearedcommunity
}

// RemoveCommunityIDs removes the "community" edge to the Community entity by IDs.
func (m *ADGroupMutation) RemoveCommunityIDs(ids ...uuid.UUID) {
	if m.removedcommunity == nil {
		m.removedcommunity = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.community, ids[i])
		m.removedcommunity[ids[i]] = struct{}{}
	}
}

// RemovedCommunity returns the removed IDs of the "community" edge to the Community entity.
func (m *ADGroupMutation) RemovedCommunityIDs() (ids []uuid.UUID) {
	for id := range m.removedcommunity {
		ids = append(ids, id)
	}
	return
}

// CommunityIDs returns the "community" edge IDs in the mutation.
func (m *ADGroupMutation) CommunityIDs() (ids []uuid.UUID) {
	for id := range m.community {
		ids = append(ids, id)
	}
	return
}

// ResetCommunity resets all changes to the "community" edge.
func (m *ADGroupMutation) ResetCommunity() {
	m.community = nil
	m.clearedcommunity = false
	m.removedcommunity = nil
}

// Where appends a list predicates to the ADGroupMutation builder.
func (m *ADGroupMutation) Where(ps ...predicate.ADGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ADGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ADGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ADGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ADGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ADGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ADGroup).
func (m *ADGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ADGroupMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, adgroup.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ADGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adgroup.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ADGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adgroup.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown ADGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ADGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adgroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown ADGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ADGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ADGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ADGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ADGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ADGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ADGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ADGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ADGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ADGroupMutation) ResetField(name string) error {
	switch name {
	case adgroup.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown ADGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ADGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.community != nil {
		edges = append(edges, adgroup.EdgeCommunity)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ADGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adgroup.EdgeCommunity:
		ids := make([]ent.Value, 0, len(m.community))
		for id := range m.community {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ADGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcommunity != nil {
		edges = append(edges, adgroup.EdgeCommunity)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ADGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adgroup.EdgeCommunity:
		ids := make([]ent.Value, 0, len(m.removedcommunity))
		for id := range m.removedcommunity {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ADGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcommunity {
		edges = append(edges, adgroup.EdgeCommunity)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ADGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case adgroup.EdgeCommunity:
		return m.clearedcommunity
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ADGroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ADGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ADGroupMutation) ResetEdge(name string) error {
	switch name {
	case adgroup.EdgeCommunity:
		m.ResetCommunity()
		return nil
	}
	return fmt.Errorf("unknown ADGroup edge %s", name)
}

// ApplicationMutation represents an operation that mutates the Application nodes in the graph.
type ApplicationMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	name                        *string
	description                 *string
	alt_text                    *string
	uri                         *string
	icon_uri                    *string
	is_favourite                *bool
	valid_from                  *time.Time
	valid_to                    *time.Time
	clearedFields               map[string]struct{}
	application_category        *uuid.UUID
	clearedapplication_category bool
	partner                     map[uuid.UUID]struct{}
	removedpartner              map[uuid.UUID]struct{}
	clearedpartner              bool
	done                        bool
	oldValue                    func(context.Context) (*Application, error)
	predicates                  []predicate.Application
}

var _ ent.Mutation = (*ApplicationMutation)(nil)

// applicationOption allows management of the mutation configuration using functional options.
type applicationOption func(*ApplicationMutation)

// newApplicationMutation creates new mutation for the Application entity.
func newApplicationMutation(c config, op Op, opts ...applicationOption) *ApplicationMutation {
	m := &ApplicationMutation{
		config:        c,
		op:            op,
		typ:           TypeApplication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationID sets the ID field of the mutation.
func withApplicationID(id uuid.UUID) applicationOption {
	return func(m *ApplicationMutation) {
		var (
			err   error
			once  sync.Once
			value *Application
		)
		m.oldValue = func(ctx context.Context) (*Application, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Application.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplication sets the old Application of the mutation.
func withApplication(node *Application) applicationOption {
	return func(m *ApplicationMutation) {
		m.oldValue = func(context.Context) (*Application, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Application entities.
func (m *ApplicationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Application.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ApplicationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ApplicationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ApplicationMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ApplicationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ApplicationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ApplicationMutation) ResetDescription() {
	m.description = nil
}

// SetAltText sets the "alt_text" field.
func (m *ApplicationMutation) SetAltText(s string) {
	m.alt_text = &s
}

// AltText returns the value of the "alt_text" field in the mutation.
func (m *ApplicationMutation) AltText() (r string, exists bool) {
	v := m.alt_text
	if v == nil {
		return
	}
	return *v, true
}

// OldAltText returns the old "alt_text" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldAltText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAltText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAltText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAltText: %w", err)
	}
	return oldValue.AltText, nil
}

// ResetAltText resets all changes to the "alt_text" field.
func (m *ApplicationMutation) ResetAltText() {
	m.alt_text = nil
}

// SetURI sets the "uri" field.
func (m *ApplicationMutation) SetURI(s string) {
	m.uri = &s
}

// URI returns the value of the "uri" field in the mutation.
func (m *ApplicationMutation) URI() (r string, exists bool) {
	v := m.uri
	if v == nil {
		return
	}
	return *v, true
}

// OldURI returns the old "uri" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldURI(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURI: %w", err)
	}
	return oldValue.URI, nil
}

// ResetURI resets all changes to the "uri" field.
func (m *ApplicationMutation) ResetURI() {
	m.uri = nil
}

// SetIconURI sets the "icon_uri" field.
func (m *ApplicationMutation) SetIconURI(s string) {
	m.icon_uri = &s
}

// IconURI returns the value of the "icon_uri" field in the mutation.
func (m *ApplicationMutation) IconURI() (r string, exists bool) {
	v := m.icon_uri
	if v == nil {
		return
	}
	return *v, true
}

// OldIconURI returns the old "icon_uri" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldIconURI(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIconURI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIconURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIconURI: %w", err)
	}
	return oldValue.IconURI, nil
}

// ResetIconURI resets all changes to the "icon_uri" field.
func (m *ApplicationMutation) ResetIconURI() {
	m.icon_uri = nil
}

// SetIsFavourite sets the "is_favourite" field.
func (m *ApplicationMutation) SetIsFavourite(b bool) {
	m.is_favourite = &b
}

// IsFavourite returns the value of the "is_favourite" field in the mutation.
func (m *ApplicationMutation) IsFavourite() (r bool, exists bool) {
	v := m.is_favourite
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFavourite returns the old "is_favourite" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldIsFavourite(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsFavourite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsFavourite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFavourite: %w", err)
	}
	return oldValue.IsFavourite, nil
}

// ResetIsFavourite resets all changes to the "is_favourite" field.
func (m *ApplicationMutation) ResetIsFavourite() {
	m.is_favourite = nil
}

// SetValidFrom sets the "valid_from" field.
func (m *ApplicationMutation) SetValidFrom(t time.Time) {
	m.valid_from = &t
}

// ValidFrom returns the value of the "valid_from" field in the mutation.
func (m *ApplicationMutation) ValidFrom() (r time.Time, exists bool) {
	v := m.valid_from
	if v == nil {
		return
	}
	return *v, true
}

// OldValidFrom returns the old "valid_from" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldValidFrom(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidFrom: %w", err)
	}
	return oldValue.ValidFrom, nil
}

// ResetValidFrom resets all changes to the "valid_from" field.
func (m *ApplicationMutation) ResetValidFrom() {
	m.valid_from = nil
}

// SetValidTo sets the "valid_to" field.
func (m *ApplicationMutation) SetValidTo(t time.Time) {
	m.valid_to = &t
}

// ValidTo returns the value of the "valid_to" field in the mutation.
func (m *ApplicationMutation) ValidTo() (r time.Time, exists bool) {
	v := m.valid_to
	if v == nil {
		return
	}
	return *v, true
}

// OldValidTo returns the old "valid_to" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldValidTo(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidTo: %w", err)
	}
	return oldValue.ValidTo, nil
}

// ResetValidTo resets all changes to the "valid_to" field.
func (m *ApplicationMutation) ResetValidTo() {
	m.valid_to = nil
}

// SetApplicationCategoryID sets the "application_category" edge to the ApplicationCategory entity by id.
func (m *ApplicationMutation) SetApplicationCategoryID(id uuid.UUID) {
	m.application_category = &id
}

// ClearApplicationCategory clears the "application_category" edge to the ApplicationCategory entity.
func (m *ApplicationMutation) ClearApplicationCategory() {
	m.clearedapplication_category = true
}

// ApplicationCategoryCleared reports if the "application_category" edge to the ApplicationCategory entity was cleared.
func (m *ApplicationMutation) ApplicationCategoryCleared() bool {
	return m.clearedapplication_category
}

// ApplicationCategoryID returns the "application_category" edge ID in the mutation.
func (m *ApplicationMutation) ApplicationCategoryID() (id uuid.UUID, exists bool) {
	if m.application_category != nil {
		return *m.application_category, true
	}
	return
}

// ApplicationCategoryIDs returns the "application_category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicationCategoryID instead. It exists only for internal usage by the builders.
func (m *ApplicationMutation) ApplicationCategoryIDs() (ids []uuid.UUID) {
	if id := m.application_category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplicationCategory resets all changes to the "application_category" edge.
func (m *ApplicationMutation) ResetApplicationCategory() {
	m.application_category = nil
	m.clearedapplication_category = false
}

// AddPartnerIDs adds the "partner" edge to the Partner entity by ids.
func (m *ApplicationMutation) AddPartnerIDs(ids ...uuid.UUID) {
	if m.partner == nil {
		m.partner = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.partner[ids[i]] = struct{}{}
	}
}

// ClearPartner clears the "partner" edge to the Partner entity.
func (m *ApplicationMutation) ClearPartner() {
	m.clearedpartner = true
}

// PartnerCleared reports if the "partner" edge to the Partner entity was cleared.
func (m *ApplicationMutation) PartnerCleared() bool {
	return m.clearedpartner
}

// RemovePartnerIDs removes the "partner" edge to the Partner entity by IDs.
func (m *ApplicationMutation) RemovePartnerIDs(ids ...uuid.UUID) {
	if m.removedpartner == nil {
		m.removedpartner = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.partner, ids[i])
		m.removedpartner[ids[i]] = struct{}{}
	}
}

// RemovedPartner returns the removed IDs of the "partner" edge to the Partner entity.
func (m *ApplicationMutation) RemovedPartnerIDs() (ids []uuid.UUID) {
	for id := range m.removedpartner {
		ids = append(ids, id)
	}
	return
}

// PartnerIDs returns the "partner" edge IDs in the mutation.
func (m *ApplicationMutation) PartnerIDs() (ids []uuid.UUID) {
	for id := range m.partner {
		ids = append(ids, id)
	}
	return
}

// ResetPartner resets all changes to the "partner" edge.
func (m *ApplicationMutation) ResetPartner() {
	m.partner = nil
	m.clearedpartner = false
	m.removedpartner = nil
}

// Where appends a list predicates to the ApplicationMutation builder.
func (m *ApplicationMutation) Where(ps ...predicate.Application) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApplicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApplicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Application, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApplicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApplicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Application).
func (m *ApplicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, application.FieldName)
	}
	if m.description != nil {
		fields = append(fields, application.FieldDescription)
	}
	if m.alt_text != nil {
		fields = append(fields, application.FieldAltText)
	}
	if m.uri != nil {
		fields = append(fields, application.FieldURI)
	}
	if m.icon_uri != nil {
		fields = append(fields, application.FieldIconURI)
	}
	if m.is_favourite != nil {
		fields = append(fields, application.FieldIsFavourite)
	}
	if m.valid_from != nil {
		fields = append(fields, application.FieldValidFrom)
	}
	if m.valid_to != nil {
		fields = append(fields, application.FieldValidTo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case application.FieldName:
		return m.Name()
	case application.FieldDescription:
		return m.Description()
	case application.FieldAltText:
		return m.AltText()
	case application.FieldURI:
		return m.URI()
	case application.FieldIconURI:
		return m.IconURI()
	case application.FieldIsFavourite:
		return m.IsFavourite()
	case application.FieldValidFrom:
		return m.ValidFrom()
	case application.FieldValidTo:
		return m.ValidTo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case application.FieldName:
		return m.OldName(ctx)
	case application.FieldDescription:
		return m.OldDescription(ctx)
	case application.FieldAltText:
		return m.OldAltText(ctx)
	case application.FieldURI:
		return m.OldURI(ctx)
	case application.FieldIconURI:
		return m.OldIconURI(ctx)
	case application.FieldIsFavourite:
		return m.OldIsFavourite(ctx)
	case application.FieldValidFrom:
		return m.OldValidFrom(ctx)
	case application.FieldValidTo:
		return m.OldValidTo(ctx)
	}
	return nil, fmt.Errorf("unknown Application field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case application.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case application.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case application.FieldAltText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAltText(v)
		return nil
	case application.FieldURI:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURI(v)
		return nil
	case application.FieldIconURI:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIconURI(v)
		return nil
	case application.FieldIsFavourite:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFavourite(v)
		return nil
	case application.FieldValidFrom:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidFrom(v)
		return nil
	case application.FieldValidTo:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidTo(v)
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Application numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Application nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationMutation) ResetField(name string) error {
	switch name {
	case application.FieldName:
		m.ResetName()
		return nil
	case application.FieldDescription:
		m.ResetDescription()
		return nil
	case application.FieldAltText:
		m.ResetAltText()
		return nil
	case application.FieldURI:
		m.ResetURI()
		return nil
	case application.FieldIconURI:
		m.ResetIconURI()
		return nil
	case application.FieldIsFavourite:
		m.ResetIsFavourite()
		return nil
	case application.FieldValidFrom:
		m.ResetValidFrom()
		return nil
	case application.FieldValidTo:
		m.ResetValidTo()
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.application_category != nil {
		edges = append(edges, application.EdgeApplicationCategory)
	}
	if m.partner != nil {
		edges = append(edges, application.EdgePartner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case application.EdgeApplicationCategory:
		if id := m.application_category; id != nil {
			return []ent.Value{*id}
		}
	case application.EdgePartner:
		ids := make([]ent.Value, 0, len(m.partner))
		for id := range m.partner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpartner != nil {
		edges = append(edges, application.EdgePartner)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case application.EdgePartner:
		ids := make([]ent.Value, 0, len(m.removedpartner))
		for id := range m.removedpartner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapplication_category {
		edges = append(edges, application.EdgeApplicationCategory)
	}
	if m.clearedpartner {
		edges = append(edges, application.EdgePartner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationMutation) EdgeCleared(name string) bool {
	switch name {
	case application.EdgeApplicationCategory:
		return m.clearedapplication_category
	case application.EdgePartner:
		return m.clearedpartner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationMutation) ClearEdge(name string) error {
	switch name {
	case application.EdgeApplicationCategory:
		m.ClearApplicationCategory()
		return nil
	}
	return fmt.Errorf("unknown Application unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationMutation) ResetEdge(name string) error {
	switch name {
	case application.EdgeApplicationCategory:
		m.ResetApplicationCategory()
		return nil
	case application.EdgePartner:
		m.ResetPartner()
		return nil
	}
	return fmt.Errorf("unknown Application edge %s", name)
}

// ApplicationCategoryMutation represents an operation that mutates the ApplicationCategory nodes in the graph.
type ApplicationCategoryMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	name               *string
	display_order      *int
	adddisplay_order   *int
	clearedFields      map[string]struct{}
	application        map[uuid.UUID]struct{}
	removedapplication map[uuid.UUID]struct{}
	clearedapplication bool
	done               bool
	oldValue           func(context.Context) (*ApplicationCategory, error)
	predicates         []predicate.ApplicationCategory
}

var _ ent.Mutation = (*ApplicationCategoryMutation)(nil)

// applicationcategoryOption allows management of the mutation configuration using functional options.
type applicationcategoryOption func(*ApplicationCategoryMutation)

// newApplicationCategoryMutation creates new mutation for the ApplicationCategory entity.
func newApplicationCategoryMutation(c config, op Op, opts ...applicationcategoryOption) *ApplicationCategoryMutation {
	m := &ApplicationCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeApplicationCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationCategoryID sets the ID field of the mutation.
func withApplicationCategoryID(id uuid.UUID) applicationcategoryOption {
	return func(m *ApplicationCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *ApplicationCategory
		)
		m.oldValue = func(ctx context.Context) (*ApplicationCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApplicationCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplicationCategory sets the old ApplicationCategory of the mutation.
func withApplicationCategory(node *ApplicationCategory) applicationcategoryOption {
	return func(m *ApplicationCategoryMutation) {
		m.oldValue = func(context.Context) (*ApplicationCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ApplicationCategory entities.
func (m *ApplicationCategoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationCategoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationCategoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApplicationCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ApplicationCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ApplicationCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ApplicationCategory entity.
// If the ApplicationCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ApplicationCategoryMutation) ResetName() {
	m.name = nil
}

// SetDisplayOrder sets the "display_order" field.
func (m *ApplicationCategoryMutation) SetDisplayOrder(i int) {
	m.display_order = &i
	m.adddisplay_order = nil
}

// DisplayOrder returns the value of the "display_order" field in the mutation.
func (m *ApplicationCategoryMutation) DisplayOrder() (r int, exists bool) {
	v := m.display_order
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayOrder returns the old "display_order" field's value of the ApplicationCategory entity.
// If the ApplicationCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationCategoryMutation) OldDisplayOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayOrder: %w", err)
	}
	return oldValue.DisplayOrder, nil
}

// AddDisplayOrder adds i to the "display_order" field.
func (m *ApplicationCategoryMutation) AddDisplayOrder(i int) {
	if m.adddisplay_order != nil {
		*m.adddisplay_order += i
	} else {
		m.adddisplay_order = &i
	}
}

// AddedDisplayOrder returns the value that was added to the "display_order" field in this mutation.
func (m *ApplicationCategoryMutation) AddedDisplayOrder() (r int, exists bool) {
	v := m.adddisplay_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetDisplayOrder resets all changes to the "display_order" field.
func (m *ApplicationCategoryMutation) ResetDisplayOrder() {
	m.display_order = nil
	m.adddisplay_order = nil
}

// AddApplicationIDs adds the "application" edge to the Application entity by ids.
func (m *ApplicationCategoryMutation) AddApplicationIDs(ids ...uuid.UUID) {
	if m.application == nil {
		m.application = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.application[ids[i]] = struct{}{}
	}
}

// ClearApplication clears the "application" edge to the Application entity.
func (m *ApplicationCategoryMutation) ClearApplication() {
	m.clearedapplication = true
}

// ApplicationCleared reports if the "application" edge to the Application entity was cleared.
func (m *ApplicationCategoryMutation) ApplicationCleared() bool {
	return m.clearedapplication
}

// RemoveApplicationIDs removes the "application" edge to the Application entity by IDs.
func (m *ApplicationCategoryMutation) RemoveApplicationIDs(ids ...uuid.UUID) {
	if m.removedapplication == nil {
		m.removedapplication = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.application, ids[i])
		m.removedapplication[ids[i]] = struct{}{}
	}
}

// RemovedApplication returns the removed IDs of the "application" edge to the Application entity.
func (m *ApplicationCategoryMutation) RemovedApplicationIDs() (ids []uuid.UUID) {
	for id := range m.removedapplication {
		ids = append(ids, id)
	}
	return
}

// ApplicationIDs returns the "application" edge IDs in the mutation.
func (m *ApplicationCategoryMutation) ApplicationIDs() (ids []uuid.UUID) {
	for id := range m.application {
		ids = append(ids, id)
	}
	return
}

// ResetApplication resets all changes to the "application" edge.
func (m *ApplicationCategoryMutation) ResetApplication() {
	m.application = nil
	m.clearedapplication = false
	m.removedapplication = nil
}

// Where appends a list predicates to the ApplicationCategoryMutation builder.
func (m *ApplicationCategoryMutation) Where(ps ...predicate.ApplicationCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApplicationCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApplicationCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ApplicationCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApplicationCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApplicationCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ApplicationCategory).
func (m *ApplicationCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationCategoryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, applicationcategory.FieldName)
	}
	if m.display_order != nil {
		fields = append(fields, applicationcategory.FieldDisplayOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case applicationcategory.FieldName:
		return m.Name()
	case applicationcategory.FieldDisplayOrder:
		return m.DisplayOrder()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case applicationcategory.FieldName:
		return m.OldName(ctx)
	case applicationcategory.FieldDisplayOrder:
		return m.OldDisplayOrder(ctx)
	}
	return nil, fmt.Errorf("unknown ApplicationCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case applicationcategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case applicationcategory.FieldDisplayOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayOrder(v)
		return nil
	}
	return fmt.Errorf("unknown ApplicationCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationCategoryMutation) AddedFields() []string {
	var fields []string
	if m.adddisplay_order != nil {
		fields = append(fields, applicationcategory.FieldDisplayOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationCategoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case applicationcategory.FieldDisplayOrder:
		return m.AddedDisplayOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case applicationcategory.FieldDisplayOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDisplayOrder(v)
		return nil
	}
	return fmt.Errorf("unknown ApplicationCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ApplicationCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationCategoryMutation) ResetField(name string) error {
	switch name {
	case applicationcategory.FieldName:
		m.ResetName()
		return nil
	case applicationcategory.FieldDisplayOrder:
		m.ResetDisplayOrder()
		return nil
	}
	return fmt.Errorf("unknown ApplicationCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.application != nil {
		edges = append(edges, applicationcategory.EdgeApplication)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case applicationcategory.EdgeApplication:
		ids := make([]ent.Value, 0, len(m.application))
		for id := range m.application {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedapplication != nil {
		edges = append(edges, applicationcategory.EdgeApplication)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case applicationcategory.EdgeApplication:
		ids := make([]ent.Value, 0, len(m.removedapplication))
		for id := range m.removedapplication {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapplication {
		edges = append(edges, applicationcategory.EdgeApplication)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case applicationcategory.EdgeApplication:
		return m.clearedapplication
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationCategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ApplicationCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationCategoryMutation) ResetEdge(name string) error {
	switch name {
	case applicationcategory.EdgeApplication:
		m.ResetApplication()
		return nil
	}
	return fmt.Errorf("unknown ApplicationCategory edge %s", name)
}

// CommunityMutation represents an operation that mutates the Community nodes in the graph.
type CommunityMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	wham_site_id              *int
	addwham_site_id           *int
	wham_title                *string
	whan_description          *string
	wham_community_url        *string
	wham_created              *time.Time
	wham_updated              *time.Time
	featured_from             *time.Time
	featured_to               *time.Time
	clearedFields             map[string]struct{}
	adgroup                   map[uuid.UUID]struct{}
	removedadgroup            map[uuid.UUID]struct{}
	clearedadgroup            bool
	community_category        map[uuid.UUID]struct{}
	removedcommunity_category map[uuid.UUID]struct{}
	clearedcommunity_category bool
	done                      bool
	oldValue                  func(context.Context) (*Community, error)
	predicates                []predicate.Community
}

var _ ent.Mutation = (*CommunityMutation)(nil)

// communityOption allows management of the mutation configuration using functional options.
type communityOption func(*CommunityMutation)

// newCommunityMutation creates new mutation for the Community entity.
func newCommunityMutation(c config, op Op, opts ...communityOption) *CommunityMutation {
	m := &CommunityMutation{
		config:        c,
		op:            op,
		typ:           TypeCommunity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommunityID sets the ID field of the mutation.
func withCommunityID(id uuid.UUID) communityOption {
	return func(m *CommunityMutation) {
		var (
			err   error
			once  sync.Once
			value *Community
		)
		m.oldValue = func(ctx context.Context) (*Community, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Community.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommunity sets the old Community of the mutation.
func withCommunity(node *Community) communityOption {
	return func(m *CommunityMutation) {
		m.oldValue = func(context.Context) (*Community, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommunityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommunityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Community entities.
func (m *CommunityMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommunityMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommunityMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Community.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWhamSiteID sets the "wham_site_id" field.
func (m *CommunityMutation) SetWhamSiteID(i int) {
	m.wham_site_id = &i
	m.addwham_site_id = nil
}

// WhamSiteID returns the value of the "wham_site_id" field in the mutation.
func (m *CommunityMutation) WhamSiteID() (r int, exists bool) {
	v := m.wham_site_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamSiteID returns the old "wham_site_id" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldWhamSiteID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamSiteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamSiteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamSiteID: %w", err)
	}
	return oldValue.WhamSiteID, nil
}

// AddWhamSiteID adds i to the "wham_site_id" field.
func (m *CommunityMutation) AddWhamSiteID(i int) {
	if m.addwham_site_id != nil {
		*m.addwham_site_id += i
	} else {
		m.addwham_site_id = &i
	}
}

// AddedWhamSiteID returns the value that was added to the "wham_site_id" field in this mutation.
func (m *CommunityMutation) AddedWhamSiteID() (r int, exists bool) {
	v := m.addwham_site_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetWhamSiteID resets all changes to the "wham_site_id" field.
func (m *CommunityMutation) ResetWhamSiteID() {
	m.wham_site_id = nil
	m.addwham_site_id = nil
}

// SetWhamTitle sets the "wham_title" field.
func (m *CommunityMutation) SetWhamTitle(s string) {
	m.wham_title = &s
}

// WhamTitle returns the value of the "wham_title" field in the mutation.
func (m *CommunityMutation) WhamTitle() (r string, exists bool) {
	v := m.wham_title
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamTitle returns the old "wham_title" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldWhamTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamTitle: %w", err)
	}
	return oldValue.WhamTitle, nil
}

// ResetWhamTitle resets all changes to the "wham_title" field.
func (m *CommunityMutation) ResetWhamTitle() {
	m.wham_title = nil
}

// SetWhanDescription sets the "whan_description" field.
func (m *CommunityMutation) SetWhanDescription(s string) {
	m.whan_description = &s
}

// WhanDescription returns the value of the "whan_description" field in the mutation.
func (m *CommunityMutation) WhanDescription() (r string, exists bool) {
	v := m.whan_description
	if v == nil {
		return
	}
	return *v, true
}

// OldWhanDescription returns the old "whan_description" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldWhanDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhanDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhanDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhanDescription: %w", err)
	}
	return oldValue.WhanDescription, nil
}

// ResetWhanDescription resets all changes to the "whan_description" field.
func (m *CommunityMutation) ResetWhanDescription() {
	m.whan_description = nil
}

// SetWhamCommunityURL sets the "wham_community_url" field.
func (m *CommunityMutation) SetWhamCommunityURL(s string) {
	m.wham_community_url = &s
}

// WhamCommunityURL returns the value of the "wham_community_url" field in the mutation.
func (m *CommunityMutation) WhamCommunityURL() (r string, exists bool) {
	v := m.wham_community_url
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamCommunityURL returns the old "wham_community_url" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldWhamCommunityURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamCommunityURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamCommunityURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamCommunityURL: %w", err)
	}
	return oldValue.WhamCommunityURL, nil
}

// ResetWhamCommunityURL resets all changes to the "wham_community_url" field.
func (m *CommunityMutation) ResetWhamCommunityURL() {
	m.wham_community_url = nil
}

// SetWhamCreated sets the "wham_created" field.
func (m *CommunityMutation) SetWhamCreated(t time.Time) {
	m.wham_created = &t
}

// WhamCreated returns the value of the "wham_created" field in the mutation.
func (m *CommunityMutation) WhamCreated() (r time.Time, exists bool) {
	v := m.wham_created
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamCreated returns the old "wham_created" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldWhamCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamCreated: %w", err)
	}
	return oldValue.WhamCreated, nil
}

// ResetWhamCreated resets all changes to the "wham_created" field.
func (m *CommunityMutation) ResetWhamCreated() {
	m.wham_created = nil
}

// SetWhamUpdated sets the "wham_updated" field.
func (m *CommunityMutation) SetWhamUpdated(t time.Time) {
	m.wham_updated = &t
}

// WhamUpdated returns the value of the "wham_updated" field in the mutation.
func (m *CommunityMutation) WhamUpdated() (r time.Time, exists bool) {
	v := m.wham_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamUpdated returns the old "wham_updated" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldWhamUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamUpdated: %w", err)
	}
	return oldValue.WhamUpdated, nil
}

// ResetWhamUpdated resets all changes to the "wham_updated" field.
func (m *CommunityMutation) ResetWhamUpdated() {
	m.wham_updated = nil
}

// SetFeaturedFrom sets the "featured_from" field.
func (m *CommunityMutation) SetFeaturedFrom(t time.Time) {
	m.featured_from = &t
}

// FeaturedFrom returns the value of the "featured_from" field in the mutation.
func (m *CommunityMutation) FeaturedFrom() (r time.Time, exists bool) {
	v := m.featured_from
	if v == nil {
		return
	}
	return *v, true
}

// OldFeaturedFrom returns the old "featured_from" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldFeaturedFrom(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeaturedFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeaturedFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeaturedFrom: %w", err)
	}
	return oldValue.FeaturedFrom, nil
}

// ClearFeaturedFrom clears the value of the "featured_from" field.
func (m *CommunityMutation) ClearFeaturedFrom() {
	m.featured_from = nil
	m.clearedFields[community.FieldFeaturedFrom] = struct{}{}
}

// FeaturedFromCleared returns if the "featured_from" field was cleared in this mutation.
func (m *CommunityMutation) FeaturedFromCleared() bool {
	_, ok := m.clearedFields[community.FieldFeaturedFrom]
	return ok
}

// ResetFeaturedFrom resets all changes to the "featured_from" field.
func (m *CommunityMutation) ResetFeaturedFrom() {
	m.featured_from = nil
	delete(m.clearedFields, community.FieldFeaturedFrom)
}

// SetFeaturedTo sets the "featured_to" field.
func (m *CommunityMutation) SetFeaturedTo(t time.Time) {
	m.featured_to = &t
}

// FeaturedTo returns the value of the "featured_to" field in the mutation.
func (m *CommunityMutation) FeaturedTo() (r time.Time, exists bool) {
	v := m.featured_to
	if v == nil {
		return
	}
	return *v, true
}

// OldFeaturedTo returns the old "featured_to" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldFeaturedTo(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeaturedTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeaturedTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeaturedTo: %w", err)
	}
	return oldValue.FeaturedTo, nil
}

// ClearFeaturedTo clears the value of the "featured_to" field.
func (m *CommunityMutation) ClearFeaturedTo() {
	m.featured_to = nil
	m.clearedFields[community.FieldFeaturedTo] = struct{}{}
}

// FeaturedToCleared returns if the "featured_to" field was cleared in this mutation.
func (m *CommunityMutation) FeaturedToCleared() bool {
	_, ok := m.clearedFields[community.FieldFeaturedTo]
	return ok
}

// ResetFeaturedTo resets all changes to the "featured_to" field.
func (m *CommunityMutation) ResetFeaturedTo() {
	m.featured_to = nil
	delete(m.clearedFields, community.FieldFeaturedTo)
}

// AddAdgroupIDs adds the "adgroup" edge to the ADGroup entity by ids.
func (m *CommunityMutation) AddAdgroupIDs(ids ...uuid.UUID) {
	if m.adgroup == nil {
		m.adgroup = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.adgroup[ids[i]] = struct{}{}
	}
}

// ClearAdgroup clears the "adgroup" edge to the ADGroup entity.
func (m *CommunityMutation) ClearAdgroup() {
	m.clearedadgroup = true
}

// AdgroupCleared reports if the "adgroup" edge to the ADGroup entity was cleared.
func (m *CommunityMutation) AdgroupCleared() bool {
	return m.clearedadgroup
}

// RemoveAdgroupIDs removes the "adgroup" edge to the ADGroup entity by IDs.
func (m *CommunityMutation) RemoveAdgroupIDs(ids ...uuid.UUID) {
	if m.removedadgroup == nil {
		m.removedadgroup = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.adgroup, ids[i])
		m.removedadgroup[ids[i]] = struct{}{}
	}
}

// RemovedAdgroup returns the removed IDs of the "adgroup" edge to the ADGroup entity.
func (m *CommunityMutation) RemovedAdgroupIDs() (ids []uuid.UUID) {
	for id := range m.removedadgroup {
		ids = append(ids, id)
	}
	return
}

// AdgroupIDs returns the "adgroup" edge IDs in the mutation.
func (m *CommunityMutation) AdgroupIDs() (ids []uuid.UUID) {
	for id := range m.adgroup {
		ids = append(ids, id)
	}
	return
}

// ResetAdgroup resets all changes to the "adgroup" edge.
func (m *CommunityMutation) ResetAdgroup() {
	m.adgroup = nil
	m.clearedadgroup = false
	m.removedadgroup = nil
}

// AddCommunityCategoryIDs adds the "community_category" edge to the CommunityCategory entity by ids.
func (m *CommunityMutation) AddCommunityCategoryIDs(ids ...uuid.UUID) {
	if m.community_category == nil {
		m.community_category = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.community_category[ids[i]] = struct{}{}
	}
}

// ClearCommunityCategory clears the "community_category" edge to the CommunityCategory entity.
func (m *CommunityMutation) ClearCommunityCategory() {
	m.clearedcommunity_category = true
}

// CommunityCategoryCleared reports if the "community_category" edge to the CommunityCategory entity was cleared.
func (m *CommunityMutation) CommunityCategoryCleared() bool {
	return m.clearedcommunity_category
}

// RemoveCommunityCategoryIDs removes the "community_category" edge to the CommunityCategory entity by IDs.
func (m *CommunityMutation) RemoveCommunityCategoryIDs(ids ...uuid.UUID) {
	if m.removedcommunity_category == nil {
		m.removedcommunity_category = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.community_category, ids[i])
		m.removedcommunity_category[ids[i]] = struct{}{}
	}
}

// RemovedCommunityCategory returns the removed IDs of the "community_category" edge to the CommunityCategory entity.
func (m *CommunityMutation) RemovedCommunityCategoryIDs() (ids []uuid.UUID) {
	for id := range m.removedcommunity_category {
		ids = append(ids, id)
	}
	return
}

// CommunityCategoryIDs returns the "community_category" edge IDs in the mutation.
func (m *CommunityMutation) CommunityCategoryIDs() (ids []uuid.UUID) {
	for id := range m.community_category {
		ids = append(ids, id)
	}
	return
}

// ResetCommunityCategory resets all changes to the "community_category" edge.
func (m *CommunityMutation) ResetCommunityCategory() {
	m.community_category = nil
	m.clearedcommunity_category = false
	m.removedcommunity_category = nil
}

// Where appends a list predicates to the CommunityMutation builder.
func (m *CommunityMutation) Where(ps ...predicate.Community) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommunityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommunityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Community, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommunityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommunityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Community).
func (m *CommunityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommunityMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.wham_site_id != nil {
		fields = append(fields, community.FieldWhamSiteID)
	}
	if m.wham_title != nil {
		fields = append(fields, community.FieldWhamTitle)
	}
	if m.whan_description != nil {
		fields = append(fields, community.FieldWhanDescription)
	}
	if m.wham_community_url != nil {
		fields = append(fields, community.FieldWhamCommunityURL)
	}
	if m.wham_created != nil {
		fields = append(fields, community.FieldWhamCreated)
	}
	if m.wham_updated != nil {
		fields = append(fields, community.FieldWhamUpdated)
	}
	if m.featured_from != nil {
		fields = append(fields, community.FieldFeaturedFrom)
	}
	if m.featured_to != nil {
		fields = append(fields, community.FieldFeaturedTo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommunityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case community.FieldWhamSiteID:
		return m.WhamSiteID()
	case community.FieldWhamTitle:
		return m.WhamTitle()
	case community.FieldWhanDescription:
		return m.WhanDescription()
	case community.FieldWhamCommunityURL:
		return m.WhamCommunityURL()
	case community.FieldWhamCreated:
		return m.WhamCreated()
	case community.FieldWhamUpdated:
		return m.WhamUpdated()
	case community.FieldFeaturedFrom:
		return m.FeaturedFrom()
	case community.FieldFeaturedTo:
		return m.FeaturedTo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommunityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case community.FieldWhamSiteID:
		return m.OldWhamSiteID(ctx)
	case community.FieldWhamTitle:
		return m.OldWhamTitle(ctx)
	case community.FieldWhanDescription:
		return m.OldWhanDescription(ctx)
	case community.FieldWhamCommunityURL:
		return m.OldWhamCommunityURL(ctx)
	case community.FieldWhamCreated:
		return m.OldWhamCreated(ctx)
	case community.FieldWhamUpdated:
		return m.OldWhamUpdated(ctx)
	case community.FieldFeaturedFrom:
		return m.OldFeaturedFrom(ctx)
	case community.FieldFeaturedTo:
		return m.OldFeaturedTo(ctx)
	}
	return nil, fmt.Errorf("unknown Community field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommunityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case community.FieldWhamSiteID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamSiteID(v)
		return nil
	case community.FieldWhamTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamTitle(v)
		return nil
	case community.FieldWhanDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhanDescription(v)
		return nil
	case community.FieldWhamCommunityURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamCommunityURL(v)
		return nil
	case community.FieldWhamCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamCreated(v)
		return nil
	case community.FieldWhamUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamUpdated(v)
		return nil
	case community.FieldFeaturedFrom:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeaturedFrom(v)
		return nil
	case community.FieldFeaturedTo:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeaturedTo(v)
		return nil
	}
	return fmt.Errorf("unknown Community field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommunityMutation) AddedFields() []string {
	var fields []string
	if m.addwham_site_id != nil {
		fields = append(fields, community.FieldWhamSiteID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommunityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case community.FieldWhamSiteID:
		return m.AddedWhamSiteID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommunityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case community.FieldWhamSiteID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWhamSiteID(v)
		return nil
	}
	return fmt.Errorf("unknown Community numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommunityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(community.FieldFeaturedFrom) {
		fields = append(fields, community.FieldFeaturedFrom)
	}
	if m.FieldCleared(community.FieldFeaturedTo) {
		fields = append(fields, community.FieldFeaturedTo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommunityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommunityMutation) ClearField(name string) error {
	switch name {
	case community.FieldFeaturedFrom:
		m.ClearFeaturedFrom()
		return nil
	case community.FieldFeaturedTo:
		m.ClearFeaturedTo()
		return nil
	}
	return fmt.Errorf("unknown Community nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommunityMutation) ResetField(name string) error {
	switch name {
	case community.FieldWhamSiteID:
		m.ResetWhamSiteID()
		return nil
	case community.FieldWhamTitle:
		m.ResetWhamTitle()
		return nil
	case community.FieldWhanDescription:
		m.ResetWhanDescription()
		return nil
	case community.FieldWhamCommunityURL:
		m.ResetWhamCommunityURL()
		return nil
	case community.FieldWhamCreated:
		m.ResetWhamCreated()
		return nil
	case community.FieldWhamUpdated:
		m.ResetWhamUpdated()
		return nil
	case community.FieldFeaturedFrom:
		m.ResetFeaturedFrom()
		return nil
	case community.FieldFeaturedTo:
		m.ResetFeaturedTo()
		return nil
	}
	return fmt.Errorf("unknown Community field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommunityMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.adgroup != nil {
		edges = append(edges, community.EdgeAdgroup)
	}
	if m.community_category != nil {
		edges = append(edges, community.EdgeCommunityCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommunityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case community.EdgeAdgroup:
		ids := make([]ent.Value, 0, len(m.adgroup))
		for id := range m.adgroup {
			ids = append(ids, id)
		}
		return ids
	case community.EdgeCommunityCategory:
		ids := make([]ent.Value, 0, len(m.community_category))
		for id := range m.community_category {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommunityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedadgroup != nil {
		edges = append(edges, community.EdgeAdgroup)
	}
	if m.removedcommunity_category != nil {
		edges = append(edges, community.EdgeCommunityCategory)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommunityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case community.EdgeAdgroup:
		ids := make([]ent.Value, 0, len(m.removedadgroup))
		for id := range m.removedadgroup {
			ids = append(ids, id)
		}
		return ids
	case community.EdgeCommunityCategory:
		ids := make([]ent.Value, 0, len(m.removedcommunity_category))
		for id := range m.removedcommunity_category {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommunityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedadgroup {
		edges = append(edges, community.EdgeAdgroup)
	}
	if m.clearedcommunity_category {
		edges = append(edges, community.EdgeCommunityCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommunityMutation) EdgeCleared(name string) bool {
	switch name {
	case community.EdgeAdgroup:
		return m.clearedadgroup
	case community.EdgeCommunityCategory:
		return m.clearedcommunity_category
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommunityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Community unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommunityMutation) ResetEdge(name string) error {
	switch name {
	case community.EdgeAdgroup:
		m.ResetAdgroup()
		return nil
	case community.EdgeCommunityCategory:
		m.ResetCommunityCategory()
		return nil
	}
	return fmt.Errorf("unknown Community edge %s", name)
}

// CommunityCategoryMutation represents an operation that mutates the CommunityCategory nodes in the graph.
type CommunityCategoryMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	name             *string
	display_order    *int
	adddisplay_order *int
	clearedFields    map[string]struct{}
	community        map[uuid.UUID]struct{}
	removedcommunity map[uuid.UUID]struct{}
	clearedcommunity bool
	done             bool
	oldValue         func(context.Context) (*CommunityCategory, error)
	predicates       []predicate.CommunityCategory
}

var _ ent.Mutation = (*CommunityCategoryMutation)(nil)

// communitycategoryOption allows management of the mutation configuration using functional options.
type communitycategoryOption func(*CommunityCategoryMutation)

// newCommunityCategoryMutation creates new mutation for the CommunityCategory entity.
func newCommunityCategoryMutation(c config, op Op, opts ...communitycategoryOption) *CommunityCategoryMutation {
	m := &CommunityCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCommunityCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommunityCategoryID sets the ID field of the mutation.
func withCommunityCategoryID(id uuid.UUID) communitycategoryOption {
	return func(m *CommunityCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *CommunityCategory
		)
		m.oldValue = func(ctx context.Context) (*CommunityCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CommunityCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommunityCategory sets the old CommunityCategory of the mutation.
func withCommunityCategory(node *CommunityCategory) communitycategoryOption {
	return func(m *CommunityCategoryMutation) {
		m.oldValue = func(context.Context) (*CommunityCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommunityCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommunityCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CommunityCategory entities.
func (m *CommunityCategoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommunityCategoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommunityCategoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CommunityCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CommunityCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CommunityCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CommunityCategory entity.
// If the CommunityCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CommunityCategoryMutation) ResetName() {
	m.name = nil
}

// SetDisplayOrder sets the "display_order" field.
func (m *CommunityCategoryMutation) SetDisplayOrder(i int) {
	m.display_order = &i
	m.adddisplay_order = nil
}

// DisplayOrder returns the value of the "display_order" field in the mutation.
func (m *CommunityCategoryMutation) DisplayOrder() (r int, exists bool) {
	v := m.display_order
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayOrder returns the old "display_order" field's value of the CommunityCategory entity.
// If the CommunityCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityCategoryMutation) OldDisplayOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayOrder: %w", err)
	}
	return oldValue.DisplayOrder, nil
}

// AddDisplayOrder adds i to the "display_order" field.
func (m *CommunityCategoryMutation) AddDisplayOrder(i int) {
	if m.adddisplay_order != nil {
		*m.adddisplay_order += i
	} else {
		m.adddisplay_order = &i
	}
}

// AddedDisplayOrder returns the value that was added to the "display_order" field in this mutation.
func (m *CommunityCategoryMutation) AddedDisplayOrder() (r int, exists bool) {
	v := m.adddisplay_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetDisplayOrder resets all changes to the "display_order" field.
func (m *CommunityCategoryMutation) ResetDisplayOrder() {
	m.display_order = nil
	m.adddisplay_order = nil
}

// AddCommunityIDs adds the "community" edge to the Community entity by ids.
func (m *CommunityCategoryMutation) AddCommunityIDs(ids ...uuid.UUID) {
	if m.community == nil {
		m.community = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.community[ids[i]] = struct{}{}
	}
}

// ClearCommunity clears the "community" edge to the Community entity.
func (m *CommunityCategoryMutation) ClearCommunity() {
	m.clearedcommunity = true
}

// CommunityCleared reports if the "community" edge to the Community entity was cleared.
func (m *CommunityCategoryMutation) CommunityCleared() bool {
	return m.clearedcommunity
}

// RemoveCommunityIDs removes the "community" edge to the Community entity by IDs.
func (m *CommunityCategoryMutation) RemoveCommunityIDs(ids ...uuid.UUID) {
	if m.removedcommunity == nil {
		m.removedcommunity = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.community, ids[i])
		m.removedcommunity[ids[i]] = struct{}{}
	}
}

// RemovedCommunity returns the removed IDs of the "community" edge to the Community entity.
func (m *CommunityCategoryMutation) RemovedCommunityIDs() (ids []uuid.UUID) {
	for id := range m.removedcommunity {
		ids = append(ids, id)
	}
	return
}

// CommunityIDs returns the "community" edge IDs in the mutation.
func (m *CommunityCategoryMutation) CommunityIDs() (ids []uuid.UUID) {
	for id := range m.community {
		ids = append(ids, id)
	}
	return
}

// ResetCommunity resets all changes to the "community" edge.
func (m *CommunityCategoryMutation) ResetCommunity() {
	m.community = nil
	m.clearedcommunity = false
	m.removedcommunity = nil
}

// Where appends a list predicates to the CommunityCategoryMutation builder.
func (m *CommunityCategoryMutation) Where(ps ...predicate.CommunityCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommunityCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommunityCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CommunityCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommunityCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommunityCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CommunityCategory).
func (m *CommunityCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommunityCategoryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, communitycategory.FieldName)
	}
	if m.display_order != nil {
		fields = append(fields, communitycategory.FieldDisplayOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommunityCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case communitycategory.FieldName:
		return m.Name()
	case communitycategory.FieldDisplayOrder:
		return m.DisplayOrder()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommunityCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case communitycategory.FieldName:
		return m.OldName(ctx)
	case communitycategory.FieldDisplayOrder:
		return m.OldDisplayOrder(ctx)
	}
	return nil, fmt.Errorf("unknown CommunityCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommunityCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case communitycategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case communitycategory.FieldDisplayOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayOrder(v)
		return nil
	}
	return fmt.Errorf("unknown CommunityCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommunityCategoryMutation) AddedFields() []string {
	var fields []string
	if m.adddisplay_order != nil {
		fields = append(fields, communitycategory.FieldDisplayOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommunityCategoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case communitycategory.FieldDisplayOrder:
		return m.AddedDisplayOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommunityCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case communitycategory.FieldDisplayOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDisplayOrder(v)
		return nil
	}
	return fmt.Errorf("unknown CommunityCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommunityCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommunityCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommunityCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CommunityCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommunityCategoryMutation) ResetField(name string) error {
	switch name {
	case communitycategory.FieldName:
		m.ResetName()
		return nil
	case communitycategory.FieldDisplayOrder:
		m.ResetDisplayOrder()
		return nil
	}
	return fmt.Errorf("unknown CommunityCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommunityCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.community != nil {
		edges = append(edges, communitycategory.EdgeCommunity)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommunityCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case communitycategory.EdgeCommunity:
		ids := make([]ent.Value, 0, len(m.community))
		for id := range m.community {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommunityCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcommunity != nil {
		edges = append(edges, communitycategory.EdgeCommunity)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommunityCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case communitycategory.EdgeCommunity:
		ids := make([]ent.Value, 0, len(m.removedcommunity))
		for id := range m.removedcommunity {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommunityCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcommunity {
		edges = append(edges, communitycategory.EdgeCommunity)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommunityCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case communitycategory.EdgeCommunity:
		return m.clearedcommunity
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommunityCategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CommunityCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommunityCategoryMutation) ResetEdge(name string) error {
	switch name {
	case communitycategory.EdgeCommunity:
		m.ResetCommunity()
		return nil
	}
	return fmt.Errorf("unknown CommunityCategory edge %s", name)
}

// PartnerMutation represents an operation that mutates the Partner nodes in the graph.
type PartnerMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	wham_site_id          *int
	addwham_site_id       *int
	wham_title            *string
	wham_description      *string
	keycloak_organisation *string
	wham_partner_url      *string
	wham_created          *time.Time
	wham_updated          *time.Time
	clearedFields         map[string]struct{}
	application           map[uuid.UUID]struct{}
	removedapplication    map[uuid.UUID]struct{}
	clearedapplication    bool
	done                  bool
	oldValue              func(context.Context) (*Partner, error)
	predicates            []predicate.Partner
}

var _ ent.Mutation = (*PartnerMutation)(nil)

// partnerOption allows management of the mutation configuration using functional options.
type partnerOption func(*PartnerMutation)

// newPartnerMutation creates new mutation for the Partner entity.
func newPartnerMutation(c config, op Op, opts ...partnerOption) *PartnerMutation {
	m := &PartnerMutation{
		config:        c,
		op:            op,
		typ:           TypePartner,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPartnerID sets the ID field of the mutation.
func withPartnerID(id uuid.UUID) partnerOption {
	return func(m *PartnerMutation) {
		var (
			err   error
			once  sync.Once
			value *Partner
		)
		m.oldValue = func(ctx context.Context) (*Partner, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Partner.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPartner sets the old Partner of the mutation.
func withPartner(node *Partner) partnerOption {
	return func(m *PartnerMutation) {
		m.oldValue = func(context.Context) (*Partner, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PartnerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PartnerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Partner entities.
func (m *PartnerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PartnerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PartnerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Partner.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWhamSiteID sets the "wham_site_id" field.
func (m *PartnerMutation) SetWhamSiteID(i int) {
	m.wham_site_id = &i
	m.addwham_site_id = nil
}

// WhamSiteID returns the value of the "wham_site_id" field in the mutation.
func (m *PartnerMutation) WhamSiteID() (r int, exists bool) {
	v := m.wham_site_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamSiteID returns the old "wham_site_id" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldWhamSiteID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamSiteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamSiteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamSiteID: %w", err)
	}
	return oldValue.WhamSiteID, nil
}

// AddWhamSiteID adds i to the "wham_site_id" field.
func (m *PartnerMutation) AddWhamSiteID(i int) {
	if m.addwham_site_id != nil {
		*m.addwham_site_id += i
	} else {
		m.addwham_site_id = &i
	}
}

// AddedWhamSiteID returns the value that was added to the "wham_site_id" field in this mutation.
func (m *PartnerMutation) AddedWhamSiteID() (r int, exists bool) {
	v := m.addwham_site_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetWhamSiteID resets all changes to the "wham_site_id" field.
func (m *PartnerMutation) ResetWhamSiteID() {
	m.wham_site_id = nil
	m.addwham_site_id = nil
}

// SetWhamTitle sets the "wham_title" field.
func (m *PartnerMutation) SetWhamTitle(s string) {
	m.wham_title = &s
}

// WhamTitle returns the value of the "wham_title" field in the mutation.
func (m *PartnerMutation) WhamTitle() (r string, exists bool) {
	v := m.wham_title
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamTitle returns the old "wham_title" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldWhamTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamTitle: %w", err)
	}
	return oldValue.WhamTitle, nil
}

// ResetWhamTitle resets all changes to the "wham_title" field.
func (m *PartnerMutation) ResetWhamTitle() {
	m.wham_title = nil
}

// SetWhamDescription sets the "wham_description" field.
func (m *PartnerMutation) SetWhamDescription(s string) {
	m.wham_description = &s
}

// WhamDescription returns the value of the "wham_description" field in the mutation.
func (m *PartnerMutation) WhamDescription() (r string, exists bool) {
	v := m.wham_description
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamDescription returns the old "wham_description" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldWhamDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamDescription: %w", err)
	}
	return oldValue.WhamDescription, nil
}

// ResetWhamDescription resets all changes to the "wham_description" field.
func (m *PartnerMutation) ResetWhamDescription() {
	m.wham_description = nil
}

// SetKeycloakOrganisation sets the "keycloak_organisation" field.
func (m *PartnerMutation) SetKeycloakOrganisation(s string) {
	m.keycloak_organisation = &s
}

// KeycloakOrganisation returns the value of the "keycloak_organisation" field in the mutation.
func (m *PartnerMutation) KeycloakOrganisation() (r string, exists bool) {
	v := m.keycloak_organisation
	if v == nil {
		return
	}
	return *v, true
}

// OldKeycloakOrganisation returns the old "keycloak_organisation" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldKeycloakOrganisation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeycloakOrganisation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeycloakOrganisation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeycloakOrganisation: %w", err)
	}
	return oldValue.KeycloakOrganisation, nil
}

// ResetKeycloakOrganisation resets all changes to the "keycloak_organisation" field.
func (m *PartnerMutation) ResetKeycloakOrganisation() {
	m.keycloak_organisation = nil
}

// SetWhamPartnerURL sets the "wham_partner_url" field.
func (m *PartnerMutation) SetWhamPartnerURL(s string) {
	m.wham_partner_url = &s
}

// WhamPartnerURL returns the value of the "wham_partner_url" field in the mutation.
func (m *PartnerMutation) WhamPartnerURL() (r string, exists bool) {
	v := m.wham_partner_url
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamPartnerURL returns the old "wham_partner_url" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldWhamPartnerURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamPartnerURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamPartnerURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamPartnerURL: %w", err)
	}
	return oldValue.WhamPartnerURL, nil
}

// ResetWhamPartnerURL resets all changes to the "wham_partner_url" field.
func (m *PartnerMutation) ResetWhamPartnerURL() {
	m.wham_partner_url = nil
}

// SetWhamCreated sets the "wham_created" field.
func (m *PartnerMutation) SetWhamCreated(t time.Time) {
	m.wham_created = &t
}

// WhamCreated returns the value of the "wham_created" field in the mutation.
func (m *PartnerMutation) WhamCreated() (r time.Time, exists bool) {
	v := m.wham_created
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamCreated returns the old "wham_created" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldWhamCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamCreated: %w", err)
	}
	return oldValue.WhamCreated, nil
}

// ResetWhamCreated resets all changes to the "wham_created" field.
func (m *PartnerMutation) ResetWhamCreated() {
	m.wham_created = nil
}

// SetWhamUpdated sets the "wham_updated" field.
func (m *PartnerMutation) SetWhamUpdated(t time.Time) {
	m.wham_updated = &t
}

// WhamUpdated returns the value of the "wham_updated" field in the mutation.
func (m *PartnerMutation) WhamUpdated() (r time.Time, exists bool) {
	v := m.wham_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamUpdated returns the old "wham_updated" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldWhamUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamUpdated: %w", err)
	}
	return oldValue.WhamUpdated, nil
}

// ResetWhamUpdated resets all changes to the "wham_updated" field.
func (m *PartnerMutation) ResetWhamUpdated() {
	m.wham_updated = nil
}

// AddApplicationIDs adds the "application" edge to the Application entity by ids.
func (m *PartnerMutation) AddApplicationIDs(ids ...uuid.UUID) {
	if m.application == nil {
		m.application = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.application[ids[i]] = struct{}{}
	}
}

// ClearApplication clears the "application" edge to the Application entity.
func (m *PartnerMutation) ClearApplication() {
	m.clearedapplication = true
}

// ApplicationCleared reports if the "application" edge to the Application entity was cleared.
func (m *PartnerMutation) ApplicationCleared() bool {
	return m.clearedapplication
}

// RemoveApplicationIDs removes the "application" edge to the Application entity by IDs.
func (m *PartnerMutation) RemoveApplicationIDs(ids ...uuid.UUID) {
	if m.removedapplication == nil {
		m.removedapplication = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.application, ids[i])
		m.removedapplication[ids[i]] = struct{}{}
	}
}

// RemovedApplication returns the removed IDs of the "application" edge to the Application entity.
func (m *PartnerMutation) RemovedApplicationIDs() (ids []uuid.UUID) {
	for id := range m.removedapplication {
		ids = append(ids, id)
	}
	return
}

// ApplicationIDs returns the "application" edge IDs in the mutation.
func (m *PartnerMutation) ApplicationIDs() (ids []uuid.UUID) {
	for id := range m.application {
		ids = append(ids, id)
	}
	return
}

// ResetApplication resets all changes to the "application" edge.
func (m *PartnerMutation) ResetApplication() {
	m.application = nil
	m.clearedapplication = false
	m.removedapplication = nil
}

// Where appends a list predicates to the PartnerMutation builder.
func (m *PartnerMutation) Where(ps ...predicate.Partner) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PartnerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PartnerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Partner, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PartnerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PartnerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Partner).
func (m *PartnerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PartnerMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.wham_site_id != nil {
		fields = append(fields, partner.FieldWhamSiteID)
	}
	if m.wham_title != nil {
		fields = append(fields, partner.FieldWhamTitle)
	}
	if m.wham_description != nil {
		fields = append(fields, partner.FieldWhamDescription)
	}
	if m.keycloak_organisation != nil {
		fields = append(fields, partner.FieldKeycloakOrganisation)
	}
	if m.wham_partner_url != nil {
		fields = append(fields, partner.FieldWhamPartnerURL)
	}
	if m.wham_created != nil {
		fields = append(fields, partner.FieldWhamCreated)
	}
	if m.wham_updated != nil {
		fields = append(fields, partner.FieldWhamUpdated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PartnerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case partner.FieldWhamSiteID:
		return m.WhamSiteID()
	case partner.FieldWhamTitle:
		return m.WhamTitle()
	case partner.FieldWhamDescription:
		return m.WhamDescription()
	case partner.FieldKeycloakOrganisation:
		return m.KeycloakOrganisation()
	case partner.FieldWhamPartnerURL:
		return m.WhamPartnerURL()
	case partner.FieldWhamCreated:
		return m.WhamCreated()
	case partner.FieldWhamUpdated:
		return m.WhamUpdated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PartnerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case partner.FieldWhamSiteID:
		return m.OldWhamSiteID(ctx)
	case partner.FieldWhamTitle:
		return m.OldWhamTitle(ctx)
	case partner.FieldWhamDescription:
		return m.OldWhamDescription(ctx)
	case partner.FieldKeycloakOrganisation:
		return m.OldKeycloakOrganisation(ctx)
	case partner.FieldWhamPartnerURL:
		return m.OldWhamPartnerURL(ctx)
	case partner.FieldWhamCreated:
		return m.OldWhamCreated(ctx)
	case partner.FieldWhamUpdated:
		return m.OldWhamUpdated(ctx)
	}
	return nil, fmt.Errorf("unknown Partner field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PartnerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case partner.FieldWhamSiteID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamSiteID(v)
		return nil
	case partner.FieldWhamTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamTitle(v)
		return nil
	case partner.FieldWhamDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamDescription(v)
		return nil
	case partner.FieldKeycloakOrganisation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeycloakOrganisation(v)
		return nil
	case partner.FieldWhamPartnerURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamPartnerURL(v)
		return nil
	case partner.FieldWhamCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamCreated(v)
		return nil
	case partner.FieldWhamUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamUpdated(v)
		return nil
	}
	return fmt.Errorf("unknown Partner field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PartnerMutation) AddedFields() []string {
	var fields []string
	if m.addwham_site_id != nil {
		fields = append(fields, partner.FieldWhamSiteID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PartnerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case partner.FieldWhamSiteID:
		return m.AddedWhamSiteID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PartnerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case partner.FieldWhamSiteID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWhamSiteID(v)
		return nil
	}
	return fmt.Errorf("unknown Partner numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PartnerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PartnerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PartnerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Partner nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PartnerMutation) ResetField(name string) error {
	switch name {
	case partner.FieldWhamSiteID:
		m.ResetWhamSiteID()
		return nil
	case partner.FieldWhamTitle:
		m.ResetWhamTitle()
		return nil
	case partner.FieldWhamDescription:
		m.ResetWhamDescription()
		return nil
	case partner.FieldKeycloakOrganisation:
		m.ResetKeycloakOrganisation()
		return nil
	case partner.FieldWhamPartnerURL:
		m.ResetWhamPartnerURL()
		return nil
	case partner.FieldWhamCreated:
		m.ResetWhamCreated()
		return nil
	case partner.FieldWhamUpdated:
		m.ResetWhamUpdated()
		return nil
	}
	return fmt.Errorf("unknown Partner field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PartnerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.application != nil {
		edges = append(edges, partner.EdgeApplication)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PartnerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case partner.EdgeApplication:
		ids := make([]ent.Value, 0, len(m.application))
		for id := range m.application {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PartnerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedapplication != nil {
		edges = append(edges, partner.EdgeApplication)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PartnerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case partner.EdgeApplication:
		ids := make([]ent.Value, 0, len(m.removedapplication))
		for id := range m.removedapplication {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PartnerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapplication {
		edges = append(edges, partner.EdgeApplication)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PartnerMutation) EdgeCleared(name string) bool {
	switch name {
	case partner.EdgeApplication:
		return m.clearedapplication
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PartnerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Partner unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PartnerMutation) ResetEdge(name string) error {
	switch name {
	case partner.EdgeApplication:
		m.ResetApplication()
		return nil
	}
	return fmt.Errorf("unknown Partner edge %s", name)
}

// PartnerPageLinkFragmentMutation represents an operation that mutates the PartnerPageLinkFragment nodes in the graph.
type PartnerPageLinkFragmentMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	link_text               *string
	wham_partner_url_suffix *string
	display_order           *int
	adddisplay_order        *int
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*PartnerPageLinkFragment, error)
	predicates              []predicate.PartnerPageLinkFragment
}

var _ ent.Mutation = (*PartnerPageLinkFragmentMutation)(nil)

// partnerpagelinkfragmentOption allows management of the mutation configuration using functional options.
type partnerpagelinkfragmentOption func(*PartnerPageLinkFragmentMutation)

// newPartnerPageLinkFragmentMutation creates new mutation for the PartnerPageLinkFragment entity.
func newPartnerPageLinkFragmentMutation(c config, op Op, opts ...partnerpagelinkfragmentOption) *PartnerPageLinkFragmentMutation {
	m := &PartnerPageLinkFragmentMutation{
		config:        c,
		op:            op,
		typ:           TypePartnerPageLinkFragment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPartnerPageLinkFragmentID sets the ID field of the mutation.
func withPartnerPageLinkFragmentID(id uuid.UUID) partnerpagelinkfragmentOption {
	return func(m *PartnerPageLinkFragmentMutation) {
		var (
			err   error
			once  sync.Once
			value *PartnerPageLinkFragment
		)
		m.oldValue = func(ctx context.Context) (*PartnerPageLinkFragment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PartnerPageLinkFragment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPartnerPageLinkFragment sets the old PartnerPageLinkFragment of the mutation.
func withPartnerPageLinkFragment(node *PartnerPageLinkFragment) partnerpagelinkfragmentOption {
	return func(m *PartnerPageLinkFragmentMutation) {
		m.oldValue = func(context.Context) (*PartnerPageLinkFragment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PartnerPageLinkFragmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PartnerPageLinkFragmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PartnerPageLinkFragment entities.
func (m *PartnerPageLinkFragmentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PartnerPageLinkFragmentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PartnerPageLinkFragmentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PartnerPageLinkFragment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLinkText sets the "link_text" field.
func (m *PartnerPageLinkFragmentMutation) SetLinkText(s string) {
	m.link_text = &s
}

// LinkText returns the value of the "link_text" field in the mutation.
func (m *PartnerPageLinkFragmentMutation) LinkText() (r string, exists bool) {
	v := m.link_text
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkText returns the old "link_text" field's value of the PartnerPageLinkFragment entity.
// If the PartnerPageLinkFragment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerPageLinkFragmentMutation) OldLinkText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinkText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinkText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkText: %w", err)
	}
	return oldValue.LinkText, nil
}

// ResetLinkText resets all changes to the "link_text" field.
func (m *PartnerPageLinkFragmentMutation) ResetLinkText() {
	m.link_text = nil
}

// SetWhamPartnerURLSuffix sets the "wham_partner_url_suffix" field.
func (m *PartnerPageLinkFragmentMutation) SetWhamPartnerURLSuffix(s string) {
	m.wham_partner_url_suffix = &s
}

// WhamPartnerURLSuffix returns the value of the "wham_partner_url_suffix" field in the mutation.
func (m *PartnerPageLinkFragmentMutation) WhamPartnerURLSuffix() (r string, exists bool) {
	v := m.wham_partner_url_suffix
	if v == nil {
		return
	}
	return *v, true
}

// OldWhamPartnerURLSuffix returns the old "wham_partner_url_suffix" field's value of the PartnerPageLinkFragment entity.
// If the PartnerPageLinkFragment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerPageLinkFragmentMutation) OldWhamPartnerURLSuffix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhamPartnerURLSuffix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhamPartnerURLSuffix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhamPartnerURLSuffix: %w", err)
	}
	return oldValue.WhamPartnerURLSuffix, nil
}

// ClearWhamPartnerURLSuffix clears the value of the "wham_partner_url_suffix" field.
func (m *PartnerPageLinkFragmentMutation) ClearWhamPartnerURLSuffix() {
	m.wham_partner_url_suffix = nil
	m.clearedFields[partnerpagelinkfragment.FieldWhamPartnerURLSuffix] = struct{}{}
}

// WhamPartnerURLSuffixCleared returns if the "wham_partner_url_suffix" field was cleared in this mutation.
func (m *PartnerPageLinkFragmentMutation) WhamPartnerURLSuffixCleared() bool {
	_, ok := m.clearedFields[partnerpagelinkfragment.FieldWhamPartnerURLSuffix]
	return ok
}

// ResetWhamPartnerURLSuffix resets all changes to the "wham_partner_url_suffix" field.
func (m *PartnerPageLinkFragmentMutation) ResetWhamPartnerURLSuffix() {
	m.wham_partner_url_suffix = nil
	delete(m.clearedFields, partnerpagelinkfragment.FieldWhamPartnerURLSuffix)
}

// SetDisplayOrder sets the "display_order" field.
func (m *PartnerPageLinkFragmentMutation) SetDisplayOrder(i int) {
	m.display_order = &i
	m.adddisplay_order = nil
}

// DisplayOrder returns the value of the "display_order" field in the mutation.
func (m *PartnerPageLinkFragmentMutation) DisplayOrder() (r int, exists bool) {
	v := m.display_order
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayOrder returns the old "display_order" field's value of the PartnerPageLinkFragment entity.
// If the PartnerPageLinkFragment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerPageLinkFragmentMutation) OldDisplayOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayOrder: %w", err)
	}
	return oldValue.DisplayOrder, nil
}

// AddDisplayOrder adds i to the "display_order" field.
func (m *PartnerPageLinkFragmentMutation) AddDisplayOrder(i int) {
	if m.adddisplay_order != nil {
		*m.adddisplay_order += i
	} else {
		m.adddisplay_order = &i
	}
}

// AddedDisplayOrder returns the value that was added to the "display_order" field in this mutation.
func (m *PartnerPageLinkFragmentMutation) AddedDisplayOrder() (r int, exists bool) {
	v := m.adddisplay_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetDisplayOrder resets all changes to the "display_order" field.
func (m *PartnerPageLinkFragmentMutation) ResetDisplayOrder() {
	m.display_order = nil
	m.adddisplay_order = nil
}

// Where appends a list predicates to the PartnerPageLinkFragmentMutation builder.
func (m *PartnerPageLinkFragmentMutation) Where(ps ...predicate.PartnerPageLinkFragment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PartnerPageLinkFragmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PartnerPageLinkFragmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PartnerPageLinkFragment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PartnerPageLinkFragmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PartnerPageLinkFragmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PartnerPageLinkFragment).
func (m *PartnerPageLinkFragmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PartnerPageLinkFragmentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.link_text != nil {
		fields = append(fields, partnerpagelinkfragment.FieldLinkText)
	}
	if m.wham_partner_url_suffix != nil {
		fields = append(fields, partnerpagelinkfragment.FieldWhamPartnerURLSuffix)
	}
	if m.display_order != nil {
		fields = append(fields, partnerpagelinkfragment.FieldDisplayOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PartnerPageLinkFragmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case partnerpagelinkfragment.FieldLinkText:
		return m.LinkText()
	case partnerpagelinkfragment.FieldWhamPartnerURLSuffix:
		return m.WhamPartnerURLSuffix()
	case partnerpagelinkfragment.FieldDisplayOrder:
		return m.DisplayOrder()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PartnerPageLinkFragmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case partnerpagelinkfragment.FieldLinkText:
		return m.OldLinkText(ctx)
	case partnerpagelinkfragment.FieldWhamPartnerURLSuffix:
		return m.OldWhamPartnerURLSuffix(ctx)
	case partnerpagelinkfragment.FieldDisplayOrder:
		return m.OldDisplayOrder(ctx)
	}
	return nil, fmt.Errorf("unknown PartnerPageLinkFragment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PartnerPageLinkFragmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case partnerpagelinkfragment.FieldLinkText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkText(v)
		return nil
	case partnerpagelinkfragment.FieldWhamPartnerURLSuffix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhamPartnerURLSuffix(v)
		return nil
	case partnerpagelinkfragment.FieldDisplayOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayOrder(v)
		return nil
	}
	return fmt.Errorf("unknown PartnerPageLinkFragment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PartnerPageLinkFragmentMutation) AddedFields() []string {
	var fields []string
	if m.adddisplay_order != nil {
		fields = append(fields, partnerpagelinkfragment.FieldDisplayOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PartnerPageLinkFragmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case partnerpagelinkfragment.FieldDisplayOrder:
		return m.AddedDisplayOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PartnerPageLinkFragmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case partnerpagelinkfragment.FieldDisplayOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDisplayOrder(v)
		return nil
	}
	return fmt.Errorf("unknown PartnerPageLinkFragment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PartnerPageLinkFragmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(partnerpagelinkfragment.FieldWhamPartnerURLSuffix) {
		fields = append(fields, partnerpagelinkfragment.FieldWhamPartnerURLSuffix)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PartnerPageLinkFragmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PartnerPageLinkFragmentMutation) ClearField(name string) error {
	switch name {
	case partnerpagelinkfragment.FieldWhamPartnerURLSuffix:
		m.ClearWhamPartnerURLSuffix()
		return nil
	}
	return fmt.Errorf("unknown PartnerPageLinkFragment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PartnerPageLinkFragmentMutation) ResetField(name string) error {
	switch name {
	case partnerpagelinkfragment.FieldLinkText:
		m.ResetLinkText()
		return nil
	case partnerpagelinkfragment.FieldWhamPartnerURLSuffix:
		m.ResetWhamPartnerURLSuffix()
		return nil
	case partnerpagelinkfragment.FieldDisplayOrder:
		m.ResetDisplayOrder()
		return nil
	}
	return fmt.Errorf("unknown PartnerPageLinkFragment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PartnerPageLinkFragmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PartnerPageLinkFragmentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PartnerPageLinkFragmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PartnerPageLinkFragmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PartnerPageLinkFragmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PartnerPageLinkFragmentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PartnerPageLinkFragmentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PartnerPageLinkFragment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PartnerPageLinkFragmentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PartnerPageLinkFragment edge %s", name)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/application"
	"dbapp/ent/applicationcategory"
	"dbapp/ent/partner"
	"dbapp/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ApplicationUpdate is the builder for updating Application entities.
type ApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (au *ApplicationUpdate) Where(ps ...predicate.Application) *ApplicationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *ApplicationUpdate) SetName(s string) *ApplicationUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableName(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *ApplicationUpdate) SetDescription(s string) *ApplicationUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableDescription(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// SetAltText sets the "alt_text" field.
func (au *ApplicationUpdate) SetAltText(s string) *ApplicationUpdate {
	au.mutation.SetAltText(s)
	return au
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableAltText(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetAltText(*s)
	}
	return au
}

// SetURI sets the "uri" field.
func (au *ApplicationUpdate) SetURI(s string) *ApplicationUpdate {
	au.mutation.SetURI(s)
	return au
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableURI(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetURI(*s)
	}
	return au
}

// SetIconURI sets the "icon_uri" field.
func (au *ApplicationUpdate) SetIconURI(s string) *ApplicationUpdate {
	au.mutation.SetIconURI(s)
	return au
}

// SetNillableIconURI sets the "icon_uri" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableIconURI(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetIconURI(*s)
	}
	return au
}

// SetIsFavourite sets the "is_favourite" field.
func (au *ApplicationUpdate) SetIsFavourite(b bool) *ApplicationUpdate {
	au.mutation.SetIsFavourite(b)
	return au
}

// SetNillableIsFavourite sets the "is_favourite" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableIsFavourite(b *bool) *ApplicationUpdate {
	if b != nil {
		au.SetIsFavourite(*b)
	}
	return au
}

// SetValidFrom sets the "valid_from" field.
func (au *ApplicationUpdate) SetValidFrom(t time.Time) *ApplicationUpdate {
	au.mutation.SetValidFrom(t)
	return au
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableValidFrom(t *time.Time) *ApplicationUpdate {
	if t != nil {
		au.SetValidFrom(*t)
	}
	return au
}

// SetValidTo sets the "valid_to" field.
func (au *ApplicationUpdate) SetValidTo(t time.Time) *ApplicationUpdate {
	au.mutation.SetValidTo(t)
	return au
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableValidTo(t *time.Time) *ApplicationUpdate {
	if t != nil {
		au.SetValidTo(*t)
	}
	return au
}

// SetApplicationCategoryID sets the "application_category" edge to the ApplicationCategory entity by ID.
func (au *ApplicationUpdate) SetApplicationCategoryID(id uuid.UUID) *ApplicationUpdate {
	au.mutation.SetApplicationCategoryID(id)
	return au
}

// SetApplicationCategory sets the "application_category" edge to the ApplicationCategory entity.
func (au *ApplicationUpdate) SetApplicationCategory(a *ApplicationCategory) *ApplicationUpdate {
	return au.SetApplicationCategoryID(a.ID)
}

// AddPartnerIDs adds the "partner" edge to the Partner entity by IDs.
func (au *ApplicationUpdate) AddPartnerIDs(ids ...uuid.UUID) *ApplicationUpdate {
	au.mutation.AddPartnerIDs(ids...)
	return au
}

// AddPartner adds the "partner" edges to the Partner entity.
func (au *ApplicationUpdate) AddPartner(p ...*Partner) *ApplicationUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPartnerIDs(ids...)
}

// Mutation returns the ApplicationMutation object of the builder.
func (au *ApplicationUpdate) Mutation() *ApplicationMutation {
	return au.mutation
}

// ClearApplicationCategory clears the "application_category" edge to the ApplicationCategory entity.
func (au *ApplicationUpdate) ClearApplicationCategory() *ApplicationUpdate {
	au.mutation.ClearApplicationCategory()
	return au
}

// ClearPartner clears all "partner" edges to the Partner entity.
func (au *ApplicationUpdate) ClearPartner() *ApplicationUpdate {
	au.mutation.ClearPartner()
	return au
}

// RemovePartnerIDs removes the "partner" edge to Partner entities by IDs.
func (au *ApplicationUpdate) RemovePartnerIDs(ids ...uuid.UUID) *ApplicationUpdate {
	au.mutation.RemovePartnerIDs(ids...)
	return au
}

// RemovePartner removes "partner" edges to Partner entities.
func (au *ApplicationUpdate) RemovePartner(p ...*Partner) *ApplicationUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePartnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApplicationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApplicationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApplicationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ApplicationUpdate) check() error {
	if _, ok := au.mutation.ApplicationCategoryID(); au.mutation.ApplicationCategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Application.application_category"`)
	}
	return nil
}

func (au *ApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(application.FieldDescription, field.TypeString, value)
	}
	if value, ok := au.mutation.AltText(); ok {
		_spec.SetField(application.FieldAltText, field.TypeString, value)
	}
	if value, ok := au.mutation.URI(); ok {
		_spec.SetField(application.FieldURI, field.TypeString, value)
	}
	if value, ok := au.mutation.IconURI(); ok {
		_spec.SetField(application.FieldIconURI, field.TypeString, value)
	}
	if value, ok := au.mutation.IsFavourite(); ok {
		_spec.SetField(application.FieldIsFavourite, field.TypeBool, value)
	}
	if value, ok := au.mutation.ValidFrom(); ok {
		_spec.SetField(application.FieldValidFrom, field.TypeTime, value)
	}
	if value, ok := au.mutation.ValidTo(); ok {
		_spec.SetField(application.FieldValidTo, field.TypeTime, value)
	}
	if au.mutation.ApplicationCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ApplicationCategoryTable,
			Columns: []string{application.ApplicationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ApplicationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ApplicationCategoryTable,
			Columns: []string{application.ApplicationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   application.PartnerTable,
			Columns: application.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPartnerIDs(); len(nodes) > 0 && !au.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   application.PartnerTable,
			Columns: application.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   application.PartnerTable,
			Columns: application.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ApplicationUpdateOne is the builder for updating a single Application entity.
type ApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationMutation
}

// SetName sets the "name" field.
func (auo *ApplicationUpdateOne) SetName(s string) *ApplicationUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableName(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *ApplicationUpdateOne) SetDescription(s string) *ApplicationUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableDescription(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// SetAltText sets the "alt_text" field.
func (auo *ApplicationUpdateOne) SetAltText(s string) *ApplicationUpdateOne {
	auo.mutation.SetAltText(s)
	return auo
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableAltText(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetAltText(*s)
	}
	return auo
}

// SetURI sets the "uri" field.
func (auo *ApplicationUpdateOne) SetURI(s string) *ApplicationUpdateOne {
	auo.mutation.SetURI(s)
	return auo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableURI(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetURI(*s)
	}
	return auo
}

// SetIconURI sets the "icon_uri" field.
func (auo *ApplicationUpdateOne) SetIconURI(s string) *ApplicationUpdateOne {
	auo.mutation.SetIconURI(s)
	return auo
}

// SetNillableIconURI sets the "icon_uri" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableIconURI(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetIconURI(*s)
	}
	return auo
}

// SetIsFavourite sets the "is_favourite" field.
func (auo *ApplicationUpdateOne) SetIsFavourite(b bool) *ApplicationUpdateOne {
	auo.mutation.SetIsFavourite(b)
	return auo
}

// SetNillableIsFavourite sets the "is_favourite" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableIsFavourite(b *bool) *ApplicationUpdateOne {
	if b != nil {
		auo.SetIsFavourite(*b)
	}
	return auo
}

// SetValidFrom sets the "valid_from" field.
func (auo *ApplicationUpdateOne) SetValidFrom(t time.Time) *ApplicationUpdateOne {
	auo.mutation.SetValidFrom(t)
	return auo
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableValidFrom(t *time.Time) *ApplicationUpdateOne {
	if t != nil {
		auo.SetValidFrom(*t)
	}
	return auo
}

// SetValidTo sets the "valid_to" field.
func (auo *ApplicationUpdateOne) SetValidTo(t time.Time) *ApplicationUpdateOne {
	auo.mutation.SetValidTo(t)
	return auo
}

// SetNillableValidTo sets the "valid_to" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableValidTo(t *time.Time) *ApplicationUpdateOne {
	if t != nil {
		auo.SetValidTo(*t)
	}
	return auo
}

// SetApplicationCategoryID sets the "application_category" edge to the ApplicationCategory entity by ID.
func (auo *ApplicationUpdateOne) SetApplicationCategoryID(id uuid.UUID) *ApplicationUpdateOne {
	auo.mutation.SetApplicationCategoryID(id)
	return auo
}

// SetApplicationCategory sets the "application_category" edge to the ApplicationCategory entity.
func (auo *ApplicationUpdateOne) SetApplicationCategory(a *ApplicationCategory) *ApplicationUpdateOne {
	return auo.SetApplicationCategoryID(a.ID)
}

// AddPartnerIDs adds the "partner" edge to the Partner entity by IDs.
func (auo *ApplicationUpdateOne) AddPartnerIDs(ids ...uuid.UUID) *ApplicationUpdateOne {
	auo.mutation.AddPartnerIDs(ids...)
	return auo
}

// AddPartner adds the "partner" edges to the Partner entity.
func (auo *ApplicationUpdateOne) AddPartner(p ...*Partner) *ApplicationUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPartnerIDs(ids...)
}

// Mutation returns the ApplicationMutation object of the builder.
func (auo *ApplicationUpdateOne) Mutation() *ApplicationMutation {
	return auo.mutation
}

// ClearApplicationCategory clears the "application_category" edge to the ApplicationCategory entity.
func (auo *ApplicationUpdateOne) ClearApplicationCategory() *ApplicationUpdateOne {
	auo.mutation.ClearApplicationCategory()
	return auo
}

// ClearPartner clears all "partner" edges to the Partner entity.
func (auo *ApplicationUpdateOne) ClearPartner() *ApplicationUpdateOne {
	auo.mutation.ClearPartner()
	return auo
}

// RemovePartnerIDs removes the "partner" edge to Partner entities by IDs.
func (auo *ApplicationUpdateOne) RemovePartnerIDs(ids ...uuid.UUID) *ApplicationUpdateOne {
	auo.mutation.RemovePartnerIDs(ids...)
	return auo
}

// RemovePartner removes "partner" edges to Partner entities.
func (auo *ApplicationUpdateOne) RemovePartner(p ...*Partner) *ApplicationUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePartnerIDs(ids...)
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (auo *ApplicationUpdateOne) Where(ps ...predicate.Application) *ApplicationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApplicationUpdateOne) Select(field string, fields ...string) *ApplicationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Application entity.
func (auo *ApplicationUpdateOne) Save(ctx context.Context) (*Application, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApplicationUpdateOne) SaveX(ctx context.Context) *Application {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ApplicationUpdateOne) check() error {
	if _, ok := auo.mutation.ApplicationCategoryID(); auo.mutation.ApplicationCategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Application.application_category"`)
	}
	return nil
}

func (auo *ApplicationUpdateOne) sqlSave(ctx context.Context) (_node *Application, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Application.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, application.FieldID)
		for _, f := range fields {
			if !application.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != application.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(application.FieldDescription, field.TypeString, value)
	}
	if value, ok := auo.mutation.AltText(); ok {
		_spec.SetField(application.FieldAltText, field.TypeString, value)
	}
	if value, ok := auo.mutation.URI(); ok {
		_spec.SetField(application.FieldURI, field.TypeString, value)
	}
	if value, ok := auo.mutation.IconURI(); ok {
		_spec.SetField(application.FieldIconURI, field.TypeString, value)
	}
	if value, ok := auo.mutation.IsFavourite(); ok {
		_spec.SetField(application.FieldIsFavourite, field.TypeBool, value)
	}
	if value, ok := auo.mutation.ValidFrom(); ok {
		_spec.SetField(application.FieldValidFrom, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ValidTo(); ok {
		_spec.SetField(application.FieldValidTo, field.TypeTime, value)
	}
	if auo.mutation.ApplicationCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ApplicationCategoryTable,
			Columns: []string{application.ApplicationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ApplicationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ApplicationCategoryTable,
			Columns: []string{application.ApplicationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   application.PartnerTable,
			Columns: application.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPartnerIDs(); len(nodes) > 0 && !auo.mutation.PartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   application.PartnerTable,
			Columns: application.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   application.PartnerTable,
			Columns: application.PartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partner.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Application{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

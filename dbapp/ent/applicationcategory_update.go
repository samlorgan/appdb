// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/application"
	"dbapp/ent/applicationcategory"
	"dbapp/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ApplicationCategoryUpdate is the builder for updating ApplicationCategory entities.
type ApplicationCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationCategoryMutation
}

// Where appends a list predicates to the ApplicationCategoryUpdate builder.
func (acu *ApplicationCategoryUpdate) Where(ps ...predicate.ApplicationCategory) *ApplicationCategoryUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetName sets the "name" field.
func (acu *ApplicationCategoryUpdate) SetName(s string) *ApplicationCategoryUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *ApplicationCategoryUpdate) SetNillableName(s *string) *ApplicationCategoryUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// SetDisplayOrder sets the "display_order" field.
func (acu *ApplicationCategoryUpdate) SetDisplayOrder(i int) *ApplicationCategoryUpdate {
	acu.mutation.ResetDisplayOrder()
	acu.mutation.SetDisplayOrder(i)
	return acu
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (acu *ApplicationCategoryUpdate) SetNillableDisplayOrder(i *int) *ApplicationCategoryUpdate {
	if i != nil {
		acu.SetDisplayOrder(*i)
	}
	return acu
}

// AddDisplayOrder adds i to the "display_order" field.
func (acu *ApplicationCategoryUpdate) AddDisplayOrder(i int) *ApplicationCategoryUpdate {
	acu.mutation.AddDisplayOrder(i)
	return acu
}

// AddApplicationIDs adds the "application" edge to the Application entity by IDs.
func (acu *ApplicationCategoryUpdate) AddApplicationIDs(ids ...uuid.UUID) *ApplicationCategoryUpdate {
	acu.mutation.AddApplicationIDs(ids...)
	return acu
}

// AddApplication adds the "application" edges to the Application entity.
func (acu *ApplicationCategoryUpdate) AddApplication(a ...*Application) *ApplicationCategoryUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.AddApplicationIDs(ids...)
}

// Mutation returns the ApplicationCategoryMutation object of the builder.
func (acu *ApplicationCategoryUpdate) Mutation() *ApplicationCategoryMutation {
	return acu.mutation
}

// ClearApplication clears all "application" edges to the Application entity.
func (acu *ApplicationCategoryUpdate) ClearApplication() *ApplicationCategoryUpdate {
	acu.mutation.ClearApplication()
	return acu
}

// RemoveApplicationIDs removes the "application" edge to Application entities by IDs.
func (acu *ApplicationCategoryUpdate) RemoveApplicationIDs(ids ...uuid.UUID) *ApplicationCategoryUpdate {
	acu.mutation.RemoveApplicationIDs(ids...)
	return acu
}

// RemoveApplication removes "application" edges to Application entities.
func (acu *ApplicationCategoryUpdate) RemoveApplication(a ...*Application) *ApplicationCategoryUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.RemoveApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *ApplicationCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *ApplicationCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *ApplicationCategoryUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *ApplicationCategoryUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acu *ApplicationCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(applicationcategory.Table, applicationcategory.Columns, sqlgraph.NewFieldSpec(applicationcategory.FieldID, field.TypeUUID))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.SetField(applicationcategory.FieldName, field.TypeString, value)
	}
	if value, ok := acu.mutation.DisplayOrder(); ok {
		_spec.SetField(applicationcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := acu.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(applicationcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if acu.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationcategory.ApplicationTable,
			Columns: []string{applicationcategory.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedApplicationIDs(); len(nodes) > 0 && !acu.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationcategory.ApplicationTable,
			Columns: []string{applicationcategory.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationcategory.ApplicationTable,
			Columns: []string{applicationcategory.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// ApplicationCategoryUpdateOne is the builder for updating a single ApplicationCategory entity.
type ApplicationCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationCategoryMutation
}

// SetName sets the "name" field.
func (acuo *ApplicationCategoryUpdateOne) SetName(s string) *ApplicationCategoryUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *ApplicationCategoryUpdateOne) SetNillableName(s *string) *ApplicationCategoryUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// SetDisplayOrder sets the "display_order" field.
func (acuo *ApplicationCategoryUpdateOne) SetDisplayOrder(i int) *ApplicationCategoryUpdateOne {
	acuo.mutation.ResetDisplayOrder()
	acuo.mutation.SetDisplayOrder(i)
	return acuo
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (acuo *ApplicationCategoryUpdateOne) SetNillableDisplayOrder(i *int) *ApplicationCategoryUpdateOne {
	if i != nil {
		acuo.SetDisplayOrder(*i)
	}
	return acuo
}

// AddDisplayOrder adds i to the "display_order" field.
func (acuo *ApplicationCategoryUpdateOne) AddDisplayOrder(i int) *ApplicationCategoryUpdateOne {
	acuo.mutation.AddDisplayOrder(i)
	return acuo
}

// AddApplicationIDs adds the "application" edge to the Application entity by IDs.
func (acuo *ApplicationCategoryUpdateOne) AddApplicationIDs(ids ...uuid.UUID) *ApplicationCategoryUpdateOne {
	acuo.mutation.AddApplicationIDs(ids...)
	return acuo
}

// AddApplication adds the "application" edges to the Application entity.
func (acuo *ApplicationCategoryUpdateOne) AddApplication(a ...*Application) *ApplicationCategoryUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.AddApplicationIDs(ids...)
}

// Mutation returns the ApplicationCategoryMutation object of the builder.
func (acuo *ApplicationCategoryUpdateOne) Mutation() *ApplicationCategoryMutation {
	return acuo.mutation
}

// ClearApplication clears all "application" edges to the Application entity.
func (acuo *ApplicationCategoryUpdateOne) ClearApplication() *ApplicationCategoryUpdateOne {
	acuo.mutation.ClearApplication()
	return acuo
}

// RemoveApplicationIDs removes the "application" edge to Application entities by IDs.
func (acuo *ApplicationCategoryUpdateOne) RemoveApplicationIDs(ids ...uuid.UUID) *ApplicationCategoryUpdateOne {
	acuo.mutation.RemoveApplicationIDs(ids...)
	return acuo
}

// RemoveApplication removes "application" edges to Application entities.
func (acuo *ApplicationCategoryUpdateOne) RemoveApplication(a ...*Application) *ApplicationCategoryUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.RemoveApplicationIDs(ids...)
}

// Where appends a list predicates to the ApplicationCategoryUpdate builder.
func (acuo *ApplicationCategoryUpdateOne) Where(ps ...predicate.ApplicationCategory) *ApplicationCategoryUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *ApplicationCategoryUpdateOne) Select(field string, fields ...string) *ApplicationCategoryUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated ApplicationCategory entity.
func (acuo *ApplicationCategoryUpdateOne) Save(ctx context.Context) (*ApplicationCategory, error) {
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *ApplicationCategoryUpdateOne) SaveX(ctx context.Context) *ApplicationCategory {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *ApplicationCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *ApplicationCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acuo *ApplicationCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ApplicationCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(applicationcategory.Table, applicationcategory.Columns, sqlgraph.NewFieldSpec(applicationcategory.FieldID, field.TypeUUID))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApplicationCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationcategory.FieldID)
		for _, f := range fields {
			if !applicationcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != applicationcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.SetField(applicationcategory.FieldName, field.TypeString, value)
	}
	if value, ok := acuo.mutation.DisplayOrder(); ok {
		_spec.SetField(applicationcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := acuo.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(applicationcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if acuo.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationcategory.ApplicationTable,
			Columns: []string{applicationcategory.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedApplicationIDs(); len(nodes) > 0 && !acuo.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationcategory.ApplicationTable,
			Columns: []string{applicationcategory.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   applicationcategory.ApplicationTable,
			Columns: []string{applicationcategory.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApplicationCategory{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}

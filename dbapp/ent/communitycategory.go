// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dbapp/ent/communitycategory"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CommunityCategory is the model entity for the CommunityCategory schema.
type CommunityCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayOrder holds the value of the "display_order" field.
	DisplayOrder int `json:"display_order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommunityCategoryQuery when eager-loading is set.
	Edges        CommunityCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommunityCategoryEdges holds the relations/edges for other nodes in the graph.
type CommunityCategoryEdges struct {
	// Community holds the value of the community edge.
	Community []*Community `json:"community,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CommunityOrErr returns the Community value or an error if the edge
// was not loaded in eager-loading.
func (e CommunityCategoryEdges) CommunityOrErr() ([]*Community, error) {
	if e.loadedTypes[0] {
		return e.Community, nil
	}
	return nil, &NotLoadedError{edge: "community"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommunityCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case communitycategory.FieldDisplayOrder:
			values[i] = new(sql.NullInt64)
		case communitycategory.FieldName:
			values[i] = new(sql.NullString)
		case communitycategory.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommunityCategory fields.
func (cc *CommunityCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case communitycategory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cc.ID = *value
			}
		case communitycategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cc.Name = value.String
			}
		case communitycategory.FieldDisplayOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_order", values[i])
			} else if value.Valid {
				cc.DisplayOrder = int(value.Int64)
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommunityCategory.
// This includes values selected through modifiers, order, etc.
func (cc *CommunityCategory) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// QueryCommunity queries the "community" edge of the CommunityCategory entity.
func (cc *CommunityCategory) QueryCommunity() *CommunityQuery {
	return NewCommunityCategoryClient(cc.config).QueryCommunity(cc)
}

// Update returns a builder for updating this CommunityCategory.
// Note that you need to call CommunityCategory.Unwrap() before calling this method if this CommunityCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CommunityCategory) Update() *CommunityCategoryUpdateOne {
	return NewCommunityCategoryClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the CommunityCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CommunityCategory) Unwrap() *CommunityCategory {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommunityCategory is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CommunityCategory) String() string {
	var builder strings.Builder
	builder.WriteString("CommunityCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("name=")
	builder.WriteString(cc.Name)
	builder.WriteString(", ")
	builder.WriteString("display_order=")
	builder.WriteString(fmt.Sprintf("%v", cc.DisplayOrder))
	builder.WriteByte(')')
	return builder.String()
}

// CommunityCategories is a parsable slice of CommunityCategory.
type CommunityCategories []*CommunityCategory

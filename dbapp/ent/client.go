// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"dbapp/ent/migrate"

	"dbapp/ent/adgroup"
	"dbapp/ent/application"
	"dbapp/ent/applicationcategory"
	"dbapp/ent/community"
	"dbapp/ent/communitycategory"
	"dbapp/ent/partner"
	"dbapp/ent/partnerpagelinkfragment"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ADGroup is the client for interacting with the ADGroup builders.
	ADGroup *ADGroupClient
	// Application is the client for interacting with the Application builders.
	Application *ApplicationClient
	// ApplicationCategory is the client for interacting with the ApplicationCategory builders.
	ApplicationCategory *ApplicationCategoryClient
	// Community is the client for interacting with the Community builders.
	Community *CommunityClient
	// CommunityCategory is the client for interacting with the CommunityCategory builders.
	CommunityCategory *CommunityCategoryClient
	// Partner is the client for interacting with the Partner builders.
	Partner *PartnerClient
	// PartnerPageLinkFragment is the client for interacting with the PartnerPageLinkFragment builders.
	PartnerPageLinkFragment *PartnerPageLinkFragmentClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ADGroup = NewADGroupClient(c.config)
	c.Application = NewApplicationClient(c.config)
	c.ApplicationCategory = NewApplicationCategoryClient(c.config)
	c.Community = NewCommunityClient(c.config)
	c.CommunityCategory = NewCommunityCategoryClient(c.config)
	c.Partner = NewPartnerClient(c.config)
	c.PartnerPageLinkFragment = NewPartnerPageLinkFragmentClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		ADGroup:                 NewADGroupClient(cfg),
		Application:             NewApplicationClient(cfg),
		ApplicationCategory:     NewApplicationCategoryClient(cfg),
		Community:               NewCommunityClient(cfg),
		CommunityCategory:       NewCommunityCategoryClient(cfg),
		Partner:                 NewPartnerClient(cfg),
		PartnerPageLinkFragment: NewPartnerPageLinkFragmentClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		ADGroup:                 NewADGroupClient(cfg),
		Application:             NewApplicationClient(cfg),
		ApplicationCategory:     NewApplicationCategoryClient(cfg),
		Community:               NewCommunityClient(cfg),
		CommunityCategory:       NewCommunityCategoryClient(cfg),
		Partner:                 NewPartnerClient(cfg),
		PartnerPageLinkFragment: NewPartnerPageLinkFragmentClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ADGroup.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ADGroup, c.Application, c.ApplicationCategory, c.Community,
		c.CommunityCategory, c.Partner, c.PartnerPageLinkFragment,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ADGroup, c.Application, c.ApplicationCategory, c.Community,
		c.CommunityCategory, c.Partner, c.PartnerPageLinkFragment,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ADGroupMutation:
		return c.ADGroup.mutate(ctx, m)
	case *ApplicationMutation:
		return c.Application.mutate(ctx, m)
	case *ApplicationCategoryMutation:
		return c.ApplicationCategory.mutate(ctx, m)
	case *CommunityMutation:
		return c.Community.mutate(ctx, m)
	case *CommunityCategoryMutation:
		return c.CommunityCategory.mutate(ctx, m)
	case *PartnerMutation:
		return c.Partner.mutate(ctx, m)
	case *PartnerPageLinkFragmentMutation:
		return c.PartnerPageLinkFragment.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ADGroupClient is a client for the ADGroup schema.
type ADGroupClient struct {
	config
}

// NewADGroupClient returns a client for the ADGroup from the given config.
func NewADGroupClient(c config) *ADGroupClient {
	return &ADGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adgroup.Hooks(f(g(h())))`.
func (c *ADGroupClient) Use(hooks ...Hook) {
	c.hooks.ADGroup = append(c.hooks.ADGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adgroup.Intercept(f(g(h())))`.
func (c *ADGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.ADGroup = append(c.inters.ADGroup, interceptors...)
}

// Create returns a builder for creating a ADGroup entity.
func (c *ADGroupClient) Create() *ADGroupCreate {
	mutation := newADGroupMutation(c.config, OpCreate)
	return &ADGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ADGroup entities.
func (c *ADGroupClient) CreateBulk(builders ...*ADGroupCreate) *ADGroupCreateBulk {
	return &ADGroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ADGroupClient) MapCreateBulk(slice any, setFunc func(*ADGroupCreate, int)) *ADGroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ADGroupCreateBulk{err: fmt.Errorf("calling to ADGroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ADGroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ADGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ADGroup.
func (c *ADGroupClient) Update() *ADGroupUpdate {
	mutation := newADGroupMutation(c.config, OpUpdate)
	return &ADGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ADGroupClient) UpdateOne(ag *ADGroup) *ADGroupUpdateOne {
	mutation := newADGroupMutation(c.config, OpUpdateOne, withADGroup(ag))
	return &ADGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ADGroupClient) UpdateOneID(id uuid.UUID) *ADGroupUpdateOne {
	mutation := newADGroupMutation(c.config, OpUpdateOne, withADGroupID(id))
	return &ADGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ADGroup.
func (c *ADGroupClient) Delete() *ADGroupDelete {
	mutation := newADGroupMutation(c.config, OpDelete)
	return &ADGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ADGroupClient) DeleteOne(ag *ADGroup) *ADGroupDeleteOne {
	return c.DeleteOneID(ag.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ADGroupClient) DeleteOneID(id uuid.UUID) *ADGroupDeleteOne {
	builder := c.Delete().Where(adgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ADGroupDeleteOne{builder}
}

// Query returns a query builder for ADGroup.
func (c *ADGroupClient) Query() *ADGroupQuery {
	return &ADGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeADGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a ADGroup entity by its id.
func (c *ADGroupClient) Get(ctx context.Context, id uuid.UUID) (*ADGroup, error) {
	return c.Query().Where(adgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ADGroupClient) GetX(ctx context.Context, id uuid.UUID) *ADGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCommunity queries the community edge of a ADGroup.
func (c *ADGroupClient) QueryCommunity(ag *ADGroup) *CommunityQuery {
	query := (&CommunityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adgroup.Table, adgroup.FieldID, id),
			sqlgraph.To(community.Table, community.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, adgroup.CommunityTable, adgroup.CommunityPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ADGroupClient) Hooks() []Hook {
	return c.hooks.ADGroup
}

// Interceptors returns the client interceptors.
func (c *ADGroupClient) Interceptors() []Interceptor {
	return c.inters.ADGroup
}

func (c *ADGroupClient) mutate(ctx context.Context, m *ADGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ADGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ADGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ADGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ADGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ADGroup mutation op: %q", m.Op())
	}
}

// ApplicationClient is a client for the Application schema.
type ApplicationClient struct {
	config
}

// NewApplicationClient returns a client for the Application from the given config.
func NewApplicationClient(c config) *ApplicationClient {
	return &ApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `application.Hooks(f(g(h())))`.
func (c *ApplicationClient) Use(hooks ...Hook) {
	c.hooks.Application = append(c.hooks.Application, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `application.Intercept(f(g(h())))`.
func (c *ApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Application = append(c.inters.Application, interceptors...)
}

// Create returns a builder for creating a Application entity.
func (c *ApplicationClient) Create() *ApplicationCreate {
	mutation := newApplicationMutation(c.config, OpCreate)
	return &ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Application entities.
func (c *ApplicationClient) CreateBulk(builders ...*ApplicationCreate) *ApplicationCreateBulk {
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApplicationClient) MapCreateBulk(slice any, setFunc func(*ApplicationCreate, int)) *ApplicationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApplicationCreateBulk{err: fmt.Errorf("calling to ApplicationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApplicationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Application.
func (c *ApplicationClient) Update() *ApplicationUpdate {
	mutation := newApplicationMutation(c.config, OpUpdate)
	return &ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationClient) UpdateOne(a *Application) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplication(a))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationClient) UpdateOneID(id uuid.UUID) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplicationID(id))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Application.
func (c *ApplicationClient) Delete() *ApplicationDelete {
	mutation := newApplicationMutation(c.config, OpDelete)
	return &ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationClient) DeleteOne(a *Application) *ApplicationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationClient) DeleteOneID(id uuid.UUID) *ApplicationDeleteOne {
	builder := c.Delete().Where(application.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationDeleteOne{builder}
}

// Query returns a query builder for Application.
func (c *ApplicationClient) Query() *ApplicationQuery {
	return &ApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a Application entity by its id.
func (c *ApplicationClient) Get(ctx context.Context, id uuid.UUID) (*Application, error) {
	return c.Query().Where(application.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationClient) GetX(ctx context.Context, id uuid.UUID) *Application {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicationCategory queries the application_category edge of a Application.
func (c *ApplicationClient) QueryApplicationCategory(a *Application) *ApplicationCategoryQuery {
	query := (&ApplicationCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(applicationcategory.Table, applicationcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.ApplicationCategoryTable, application.ApplicationCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartner queries the partner edge of a Application.
func (c *ApplicationClient) QueryPartner(a *Application) *PartnerQuery {
	query := (&PartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(partner.Table, partner.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, application.PartnerTable, application.PartnerPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationClient) Hooks() []Hook {
	return c.hooks.Application
}

// Interceptors returns the client interceptors.
func (c *ApplicationClient) Interceptors() []Interceptor {
	return c.inters.Application
}

func (c *ApplicationClient) mutate(ctx context.Context, m *ApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Application mutation op: %q", m.Op())
	}
}

// ApplicationCategoryClient is a client for the ApplicationCategory schema.
type ApplicationCategoryClient struct {
	config
}

// NewApplicationCategoryClient returns a client for the ApplicationCategory from the given config.
func NewApplicationCategoryClient(c config) *ApplicationCategoryClient {
	return &ApplicationCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applicationcategory.Hooks(f(g(h())))`.
func (c *ApplicationCategoryClient) Use(hooks ...Hook) {
	c.hooks.ApplicationCategory = append(c.hooks.ApplicationCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `applicationcategory.Intercept(f(g(h())))`.
func (c *ApplicationCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApplicationCategory = append(c.inters.ApplicationCategory, interceptors...)
}

// Create returns a builder for creating a ApplicationCategory entity.
func (c *ApplicationCategoryClient) Create() *ApplicationCategoryCreate {
	mutation := newApplicationCategoryMutation(c.config, OpCreate)
	return &ApplicationCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApplicationCategory entities.
func (c *ApplicationCategoryClient) CreateBulk(builders ...*ApplicationCategoryCreate) *ApplicationCategoryCreateBulk {
	return &ApplicationCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApplicationCategoryClient) MapCreateBulk(slice any, setFunc func(*ApplicationCategoryCreate, int)) *ApplicationCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApplicationCategoryCreateBulk{err: fmt.Errorf("calling to ApplicationCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApplicationCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApplicationCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApplicationCategory.
func (c *ApplicationCategoryClient) Update() *ApplicationCategoryUpdate {
	mutation := newApplicationCategoryMutation(c.config, OpUpdate)
	return &ApplicationCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationCategoryClient) UpdateOne(ac *ApplicationCategory) *ApplicationCategoryUpdateOne {
	mutation := newApplicationCategoryMutation(c.config, OpUpdateOne, withApplicationCategory(ac))
	return &ApplicationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationCategoryClient) UpdateOneID(id uuid.UUID) *ApplicationCategoryUpdateOne {
	mutation := newApplicationCategoryMutation(c.config, OpUpdateOne, withApplicationCategoryID(id))
	return &ApplicationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApplicationCategory.
func (c *ApplicationCategoryClient) Delete() *ApplicationCategoryDelete {
	mutation := newApplicationCategoryMutation(c.config, OpDelete)
	return &ApplicationCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationCategoryClient) DeleteOne(ac *ApplicationCategory) *ApplicationCategoryDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationCategoryClient) DeleteOneID(id uuid.UUID) *ApplicationCategoryDeleteOne {
	builder := c.Delete().Where(applicationcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationCategoryDeleteOne{builder}
}

// Query returns a query builder for ApplicationCategory.
func (c *ApplicationCategoryClient) Query() *ApplicationCategoryQuery {
	return &ApplicationCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplicationCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a ApplicationCategory entity by its id.
func (c *ApplicationCategoryClient) Get(ctx context.Context, id uuid.UUID) (*ApplicationCategory, error) {
	return c.Query().Where(applicationcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationCategoryClient) GetX(ctx context.Context, id uuid.UUID) *ApplicationCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplication queries the application edge of a ApplicationCategory.
func (c *ApplicationCategoryClient) QueryApplication(ac *ApplicationCategory) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationcategory.Table, applicationcategory.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, applicationcategory.ApplicationTable, applicationcategory.ApplicationColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationCategoryClient) Hooks() []Hook {
	return c.hooks.ApplicationCategory
}

// Interceptors returns the client interceptors.
func (c *ApplicationCategoryClient) Interceptors() []Interceptor {
	return c.inters.ApplicationCategory
}

func (c *ApplicationCategoryClient) mutate(ctx context.Context, m *ApplicationCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApplicationCategory mutation op: %q", m.Op())
	}
}

// CommunityClient is a client for the Community schema.
type CommunityClient struct {
	config
}

// NewCommunityClient returns a client for the Community from the given config.
func NewCommunityClient(c config) *CommunityClient {
	return &CommunityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `community.Hooks(f(g(h())))`.
func (c *CommunityClient) Use(hooks ...Hook) {
	c.hooks.Community = append(c.hooks.Community, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `community.Intercept(f(g(h())))`.
func (c *CommunityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Community = append(c.inters.Community, interceptors...)
}

// Create returns a builder for creating a Community entity.
func (c *CommunityClient) Create() *CommunityCreate {
	mutation := newCommunityMutation(c.config, OpCreate)
	return &CommunityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Community entities.
func (c *CommunityClient) CreateBulk(builders ...*CommunityCreate) *CommunityCreateBulk {
	return &CommunityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommunityClient) MapCreateBulk(slice any, setFunc func(*CommunityCreate, int)) *CommunityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommunityCreateBulk{err: fmt.Errorf("calling to CommunityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommunityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommunityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Community.
func (c *CommunityClient) Update() *CommunityUpdate {
	mutation := newCommunityMutation(c.config, OpUpdate)
	return &CommunityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommunityClient) UpdateOne(co *Community) *CommunityUpdateOne {
	mutation := newCommunityMutation(c.config, OpUpdateOne, withCommunity(co))
	return &CommunityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommunityClient) UpdateOneID(id uuid.UUID) *CommunityUpdateOne {
	mutation := newCommunityMutation(c.config, OpUpdateOne, withCommunityID(id))
	return &CommunityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Community.
func (c *CommunityClient) Delete() *CommunityDelete {
	mutation := newCommunityMutation(c.config, OpDelete)
	return &CommunityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommunityClient) DeleteOne(co *Community) *CommunityDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommunityClient) DeleteOneID(id uuid.UUID) *CommunityDeleteOne {
	builder := c.Delete().Where(community.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommunityDeleteOne{builder}
}

// Query returns a query builder for Community.
func (c *CommunityClient) Query() *CommunityQuery {
	return &CommunityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommunity},
		inters: c.Interceptors(),
	}
}

// Get returns a Community entity by its id.
func (c *CommunityClient) Get(ctx context.Context, id uuid.UUID) (*Community, error) {
	return c.Query().Where(community.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommunityClient) GetX(ctx context.Context, id uuid.UUID) *Community {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdgroup queries the adgroup edge of a Community.
func (c *CommunityClient) QueryAdgroup(co *Community) *ADGroupQuery {
	query := (&ADGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(community.Table, community.FieldID, id),
			sqlgraph.To(adgroup.Table, adgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, community.AdgroupTable, community.AdgroupPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommunityCategory queries the community_category edge of a Community.
func (c *CommunityClient) QueryCommunityCategory(co *Community) *CommunityCategoryQuery {
	query := (&CommunityCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(community.Table, community.FieldID, id),
			sqlgraph.To(communitycategory.Table, communitycategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, community.CommunityCategoryTable, community.CommunityCategoryPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommunityClient) Hooks() []Hook {
	return c.hooks.Community
}

// Interceptors returns the client interceptors.
func (c *CommunityClient) Interceptors() []Interceptor {
	return c.inters.Community
}

func (c *CommunityClient) mutate(ctx context.Context, m *CommunityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommunityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommunityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommunityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommunityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Community mutation op: %q", m.Op())
	}
}

// CommunityCategoryClient is a client for the CommunityCategory schema.
type CommunityCategoryClient struct {
	config
}

// NewCommunityCategoryClient returns a client for the CommunityCategory from the given config.
func NewCommunityCategoryClient(c config) *CommunityCategoryClient {
	return &CommunityCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `communitycategory.Hooks(f(g(h())))`.
func (c *CommunityCategoryClient) Use(hooks ...Hook) {
	c.hooks.CommunityCategory = append(c.hooks.CommunityCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `communitycategory.Intercept(f(g(h())))`.
func (c *CommunityCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.CommunityCategory = append(c.inters.CommunityCategory, interceptors...)
}

// Create returns a builder for creating a CommunityCategory entity.
func (c *CommunityCategoryClient) Create() *CommunityCategoryCreate {
	mutation := newCommunityCategoryMutation(c.config, OpCreate)
	return &CommunityCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommunityCategory entities.
func (c *CommunityCategoryClient) CreateBulk(builders ...*CommunityCategoryCreate) *CommunityCategoryCreateBulk {
	return &CommunityCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommunityCategoryClient) MapCreateBulk(slice any, setFunc func(*CommunityCategoryCreate, int)) *CommunityCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommunityCategoryCreateBulk{err: fmt.Errorf("calling to CommunityCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommunityCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommunityCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommunityCategory.
func (c *CommunityCategoryClient) Update() *CommunityCategoryUpdate {
	mutation := newCommunityCategoryMutation(c.config, OpUpdate)
	return &CommunityCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommunityCategoryClient) UpdateOne(cc *CommunityCategory) *CommunityCategoryUpdateOne {
	mutation := newCommunityCategoryMutation(c.config, OpUpdateOne, withCommunityCategory(cc))
	return &CommunityCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommunityCategoryClient) UpdateOneID(id uuid.UUID) *CommunityCategoryUpdateOne {
	mutation := newCommunityCategoryMutation(c.config, OpUpdateOne, withCommunityCategoryID(id))
	return &CommunityCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommunityCategory.
func (c *CommunityCategoryClient) Delete() *CommunityCategoryDelete {
	mutation := newCommunityCategoryMutation(c.config, OpDelete)
	return &CommunityCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommunityCategoryClient) DeleteOne(cc *CommunityCategory) *CommunityCategoryDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommunityCategoryClient) DeleteOneID(id uuid.UUID) *CommunityCategoryDeleteOne {
	builder := c.Delete().Where(communitycategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommunityCategoryDeleteOne{builder}
}

// Query returns a query builder for CommunityCategory.
func (c *CommunityCategoryClient) Query() *CommunityCategoryQuery {
	return &CommunityCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommunityCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a CommunityCategory entity by its id.
func (c *CommunityCategoryClient) Get(ctx context.Context, id uuid.UUID) (*CommunityCategory, error) {
	return c.Query().Where(communitycategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommunityCategoryClient) GetX(ctx context.Context, id uuid.UUID) *CommunityCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCommunity queries the community edge of a CommunityCategory.
func (c *CommunityCategoryClient) QueryCommunity(cc *CommunityCategory) *CommunityQuery {
	query := (&CommunityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(communitycategory.Table, communitycategory.FieldID, id),
			sqlgraph.To(community.Table, community.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, communitycategory.CommunityTable, communitycategory.CommunityPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommunityCategoryClient) Hooks() []Hook {
	return c.hooks.CommunityCategory
}

// Interceptors returns the client interceptors.
func (c *CommunityCategoryClient) Interceptors() []Interceptor {
	return c.inters.CommunityCategory
}

func (c *CommunityCategoryClient) mutate(ctx context.Context, m *CommunityCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommunityCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommunityCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommunityCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommunityCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CommunityCategory mutation op: %q", m.Op())
	}
}

// PartnerClient is a client for the Partner schema.
type PartnerClient struct {
	config
}

// NewPartnerClient returns a client for the Partner from the given config.
func NewPartnerClient(c config) *PartnerClient {
	return &PartnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partner.Hooks(f(g(h())))`.
func (c *PartnerClient) Use(hooks ...Hook) {
	c.hooks.Partner = append(c.hooks.Partner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partner.Intercept(f(g(h())))`.
func (c *PartnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Partner = append(c.inters.Partner, interceptors...)
}

// Create returns a builder for creating a Partner entity.
func (c *PartnerClient) Create() *PartnerCreate {
	mutation := newPartnerMutation(c.config, OpCreate)
	return &PartnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Partner entities.
func (c *PartnerClient) CreateBulk(builders ...*PartnerCreate) *PartnerCreateBulk {
	return &PartnerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PartnerClient) MapCreateBulk(slice any, setFunc func(*PartnerCreate, int)) *PartnerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PartnerCreateBulk{err: fmt.Errorf("calling to PartnerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PartnerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PartnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Partner.
func (c *PartnerClient) Update() *PartnerUpdate {
	mutation := newPartnerMutation(c.config, OpUpdate)
	return &PartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerClient) UpdateOne(pa *Partner) *PartnerUpdateOne {
	mutation := newPartnerMutation(c.config, OpUpdateOne, withPartner(pa))
	return &PartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerClient) UpdateOneID(id uuid.UUID) *PartnerUpdateOne {
	mutation := newPartnerMutation(c.config, OpUpdateOne, withPartnerID(id))
	return &PartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Partner.
func (c *PartnerClient) Delete() *PartnerDelete {
	mutation := newPartnerMutation(c.config, OpDelete)
	return &PartnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerClient) DeleteOne(pa *Partner) *PartnerDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerClient) DeleteOneID(id uuid.UUID) *PartnerDeleteOne {
	builder := c.Delete().Where(partner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerDeleteOne{builder}
}

// Query returns a query builder for Partner.
func (c *PartnerClient) Query() *PartnerQuery {
	return &PartnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartner},
		inters: c.Interceptors(),
	}
}

// Get returns a Partner entity by its id.
func (c *PartnerClient) Get(ctx context.Context, id uuid.UUID) (*Partner, error) {
	return c.Query().Where(partner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerClient) GetX(ctx context.Context, id uuid.UUID) *Partner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplication queries the application edge of a Partner.
func (c *PartnerClient) QueryApplication(pa *Partner) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partner.Table, partner.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, partner.ApplicationTable, partner.ApplicationPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartnerClient) Hooks() []Hook {
	return c.hooks.Partner
}

// Interceptors returns the client interceptors.
func (c *PartnerClient) Interceptors() []Interceptor {
	return c.inters.Partner
}

func (c *PartnerClient) mutate(ctx context.Context, m *PartnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Partner mutation op: %q", m.Op())
	}
}

// PartnerPageLinkFragmentClient is a client for the PartnerPageLinkFragment schema.
type PartnerPageLinkFragmentClient struct {
	config
}

// NewPartnerPageLinkFragmentClient returns a client for the PartnerPageLinkFragment from the given config.
func NewPartnerPageLinkFragmentClient(c config) *PartnerPageLinkFragmentClient {
	return &PartnerPageLinkFragmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partnerpagelinkfragment.Hooks(f(g(h())))`.
func (c *PartnerPageLinkFragmentClient) Use(hooks ...Hook) {
	c.hooks.PartnerPageLinkFragment = append(c.hooks.PartnerPageLinkFragment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partnerpagelinkfragment.Intercept(f(g(h())))`.
func (c *PartnerPageLinkFragmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.PartnerPageLinkFragment = append(c.inters.PartnerPageLinkFragment, interceptors...)
}

// Create returns a builder for creating a PartnerPageLinkFragment entity.
func (c *PartnerPageLinkFragmentClient) Create() *PartnerPageLinkFragmentCreate {
	mutation := newPartnerPageLinkFragmentMutation(c.config, OpCreate)
	return &PartnerPageLinkFragmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartnerPageLinkFragment entities.
func (c *PartnerPageLinkFragmentClient) CreateBulk(builders ...*PartnerPageLinkFragmentCreate) *PartnerPageLinkFragmentCreateBulk {
	return &PartnerPageLinkFragmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PartnerPageLinkFragmentClient) MapCreateBulk(slice any, setFunc func(*PartnerPageLinkFragmentCreate, int)) *PartnerPageLinkFragmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PartnerPageLinkFragmentCreateBulk{err: fmt.Errorf("calling to PartnerPageLinkFragmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PartnerPageLinkFragmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PartnerPageLinkFragmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartnerPageLinkFragment.
func (c *PartnerPageLinkFragmentClient) Update() *PartnerPageLinkFragmentUpdate {
	mutation := newPartnerPageLinkFragmentMutation(c.config, OpUpdate)
	return &PartnerPageLinkFragmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerPageLinkFragmentClient) UpdateOne(pplf *PartnerPageLinkFragment) *PartnerPageLinkFragmentUpdateOne {
	mutation := newPartnerPageLinkFragmentMutation(c.config, OpUpdateOne, withPartnerPageLinkFragment(pplf))
	return &PartnerPageLinkFragmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerPageLinkFragmentClient) UpdateOneID(id uuid.UUID) *PartnerPageLinkFragmentUpdateOne {
	mutation := newPartnerPageLinkFragmentMutation(c.config, OpUpdateOne, withPartnerPageLinkFragmentID(id))
	return &PartnerPageLinkFragmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartnerPageLinkFragment.
func (c *PartnerPageLinkFragmentClient) Delete() *PartnerPageLinkFragmentDelete {
	mutation := newPartnerPageLinkFragmentMutation(c.config, OpDelete)
	return &PartnerPageLinkFragmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerPageLinkFragmentClient) DeleteOne(pplf *PartnerPageLinkFragment) *PartnerPageLinkFragmentDeleteOne {
	return c.DeleteOneID(pplf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerPageLinkFragmentClient) DeleteOneID(id uuid.UUID) *PartnerPageLinkFragmentDeleteOne {
	builder := c.Delete().Where(partnerpagelinkfragment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerPageLinkFragmentDeleteOne{builder}
}

// Query returns a query builder for PartnerPageLinkFragment.
func (c *PartnerPageLinkFragmentClient) Query() *PartnerPageLinkFragmentQuery {
	return &PartnerPageLinkFragmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartnerPageLinkFragment},
		inters: c.Interceptors(),
	}
}

// Get returns a PartnerPageLinkFragment entity by its id.
func (c *PartnerPageLinkFragmentClient) Get(ctx context.Context, id uuid.UUID) (*PartnerPageLinkFragment, error) {
	return c.Query().Where(partnerpagelinkfragment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerPageLinkFragmentClient) GetX(ctx context.Context, id uuid.UUID) *PartnerPageLinkFragment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PartnerPageLinkFragmentClient) Hooks() []Hook {
	return c.hooks.PartnerPageLinkFragment
}

// Interceptors returns the client interceptors.
func (c *PartnerPageLinkFragmentClient) Interceptors() []Interceptor {
	return c.inters.PartnerPageLinkFragment
}

func (c *PartnerPageLinkFragmentClient) mutate(ctx context.Context, m *PartnerPageLinkFragmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerPageLinkFragmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerPageLinkFragmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerPageLinkFragmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerPageLinkFragmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PartnerPageLinkFragment mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ADGroup, Application, ApplicationCategory, Community, CommunityCategory,
		Partner, PartnerPageLinkFragment []ent.Hook
	}
	inters struct {
		ADGroup, Application, ApplicationCategory, Community, CommunityCategory,
		Partner, PartnerPageLinkFragment []ent.Interceptor
	}
)

// Code generated by ent, DO NOT EDIT.

package application

import (
	"dbapp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldDescription, v))
}

// AltText applies equality check predicate on the "alt_text" field. It's identical to AltTextEQ.
func AltText(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldAltText, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldURI, v))
}

// IconURI applies equality check predicate on the "icon_uri" field. It's identical to IconURIEQ.
func IconURI(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldIconURI, v))
}

// IsFavourite applies equality check predicate on the "is_favourite" field. It's identical to IsFavouriteEQ.
func IsFavourite(v bool) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldIsFavourite, v))
}

// ValidFrom applies equality check predicate on the "valid_from" field. It's identical to ValidFromEQ.
func ValidFrom(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldValidFrom, v))
}

// ValidTo applies equality check predicate on the "valid_to" field. It's identical to ValidToEQ.
func ValidTo(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldValidTo, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldDescription, v))
}

// AltTextEQ applies the EQ predicate on the "alt_text" field.
func AltTextEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldAltText, v))
}

// AltTextNEQ applies the NEQ predicate on the "alt_text" field.
func AltTextNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldAltText, v))
}

// AltTextIn applies the In predicate on the "alt_text" field.
func AltTextIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldAltText, vs...))
}

// AltTextNotIn applies the NotIn predicate on the "alt_text" field.
func AltTextNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldAltText, vs...))
}

// AltTextGT applies the GT predicate on the "alt_text" field.
func AltTextGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldAltText, v))
}

// AltTextGTE applies the GTE predicate on the "alt_text" field.
func AltTextGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldAltText, v))
}

// AltTextLT applies the LT predicate on the "alt_text" field.
func AltTextLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldAltText, v))
}

// AltTextLTE applies the LTE predicate on the "alt_text" field.
func AltTextLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldAltText, v))
}

// AltTextContains applies the Contains predicate on the "alt_text" field.
func AltTextContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldAltText, v))
}

// AltTextHasPrefix applies the HasPrefix predicate on the "alt_text" field.
func AltTextHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldAltText, v))
}

// AltTextHasSuffix applies the HasSuffix predicate on the "alt_text" field.
func AltTextHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldAltText, v))
}

// AltTextEqualFold applies the EqualFold predicate on the "alt_text" field.
func AltTextEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldAltText, v))
}

// AltTextContainsFold applies the ContainsFold predicate on the "alt_text" field.
func AltTextContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldAltText, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldURI, v))
}

// IconURIEQ applies the EQ predicate on the "icon_uri" field.
func IconURIEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldIconURI, v))
}

// IconURINEQ applies the NEQ predicate on the "icon_uri" field.
func IconURINEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldIconURI, v))
}

// IconURIIn applies the In predicate on the "icon_uri" field.
func IconURIIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldIconURI, vs...))
}

// IconURINotIn applies the NotIn predicate on the "icon_uri" field.
func IconURINotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldIconURI, vs...))
}

// IconURIGT applies the GT predicate on the "icon_uri" field.
func IconURIGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldIconURI, v))
}

// IconURIGTE applies the GTE predicate on the "icon_uri" field.
func IconURIGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldIconURI, v))
}

// IconURILT applies the LT predicate on the "icon_uri" field.
func IconURILT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldIconURI, v))
}

// IconURILTE applies the LTE predicate on the "icon_uri" field.
func IconURILTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldIconURI, v))
}

// IconURIContains applies the Contains predicate on the "icon_uri" field.
func IconURIContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldIconURI, v))
}

// IconURIHasPrefix applies the HasPrefix predicate on the "icon_uri" field.
func IconURIHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldIconURI, v))
}

// IconURIHasSuffix applies the HasSuffix predicate on the "icon_uri" field.
func IconURIHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldIconURI, v))
}

// IconURIEqualFold applies the EqualFold predicate on the "icon_uri" field.
func IconURIEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldIconURI, v))
}

// IconURIContainsFold applies the ContainsFold predicate on the "icon_uri" field.
func IconURIContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldIconURI, v))
}

// IsFavouriteEQ applies the EQ predicate on the "is_favourite" field.
func IsFavouriteEQ(v bool) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldIsFavourite, v))
}

// IsFavouriteNEQ applies the NEQ predicate on the "is_favourite" field.
func IsFavouriteNEQ(v bool) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldIsFavourite, v))
}

// ValidFromEQ applies the EQ predicate on the "valid_from" field.
func ValidFromEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldValidFrom, v))
}

// ValidFromNEQ applies the NEQ predicate on the "valid_from" field.
func ValidFromNEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldValidFrom, v))
}

// ValidFromIn applies the In predicate on the "valid_from" field.
func ValidFromIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldValidFrom, vs...))
}

// ValidFromNotIn applies the NotIn predicate on the "valid_from" field.
func ValidFromNotIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldValidFrom, vs...))
}

// ValidFromGT applies the GT predicate on the "valid_from" field.
func ValidFromGT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldValidFrom, v))
}

// ValidFromGTE applies the GTE predicate on the "valid_from" field.
func ValidFromGTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldValidFrom, v))
}

// ValidFromLT applies the LT predicate on the "valid_from" field.
func ValidFromLT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldValidFrom, v))
}

// ValidFromLTE applies the LTE predicate on the "valid_from" field.
func ValidFromLTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldValidFrom, v))
}

// ValidToEQ applies the EQ predicate on the "valid_to" field.
func ValidToEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldValidTo, v))
}

// ValidToNEQ applies the NEQ predicate on the "valid_to" field.
func ValidToNEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldValidTo, v))
}

// ValidToIn applies the In predicate on the "valid_to" field.
func ValidToIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldValidTo, vs...))
}

// ValidToNotIn applies the NotIn predicate on the "valid_to" field.
func ValidToNotIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldValidTo, vs...))
}

// ValidToGT applies the GT predicate on the "valid_to" field.
func ValidToGT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldValidTo, v))
}

// ValidToGTE applies the GTE predicate on the "valid_to" field.
func ValidToGTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldValidTo, v))
}

// ValidToLT applies the LT predicate on the "valid_to" field.
func ValidToLT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldValidTo, v))
}

// ValidToLTE applies the LTE predicate on the "valid_to" field.
func ValidToLTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldValidTo, v))
}

// HasApplicationCategory applies the HasEdge predicate on the "application_category" edge.
func HasApplicationCategory() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationCategoryTable, ApplicationCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationCategoryWith applies the HasEdge predicate on the "application_category" edge with a given conditions (other predicates).
func HasApplicationCategoryWith(preds ...predicate.ApplicationCategory) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newApplicationCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartner applies the HasEdge predicate on the "partner" edge.
func HasPartner() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PartnerTable, PartnerPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnerWith applies the HasEdge predicate on the "partner" edge with a given conditions (other predicates).
func HasPartnerWith(preds ...predicate.Partner) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newPartnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Application) predicate.Application {
	return predicate.Application(sql.NotPredicates(p))
}

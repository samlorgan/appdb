// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/adgroup"
	"dbapp/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ADGroupDelete is the builder for deleting a ADGroup entity.
type ADGroupDelete struct {
	config
	hooks    []Hook
	mutation *ADGroupMutation
}

// Where appends a list predicates to the ADGroupDelete builder.
func (agd *ADGroupDelete) Where(ps ...predicate.ADGroup) *ADGroupDelete {
	agd.mutation.Where(ps...)
	return agd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (agd *ADGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, agd.sqlExec, agd.mutation, agd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (agd *ADGroupDelete) ExecX(ctx context.Context) int {
	n, err := agd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (agd *ADGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(adgroup.Table, sqlgraph.NewFieldSpec(adgroup.FieldID, field.TypeUUID))
	if ps := agd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, agd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	agd.mutation.done = true
	return affected, err
}

// ADGroupDeleteOne is the builder for deleting a single ADGroup entity.
type ADGroupDeleteOne struct {
	agd *ADGroupDelete
}

// Where appends a list predicates to the ADGroupDelete builder.
func (agdo *ADGroupDeleteOne) Where(ps ...predicate.ADGroup) *ADGroupDeleteOne {
	agdo.agd.mutation.Where(ps...)
	return agdo
}

// Exec executes the deletion query.
func (agdo *ADGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := agdo.agd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{adgroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (agdo *ADGroupDeleteOne) ExecX(ctx context.Context) {
	if err := agdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/partnerpagelinkfragment"
	"dbapp/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerPageLinkFragmentUpdate is the builder for updating PartnerPageLinkFragment entities.
type PartnerPageLinkFragmentUpdate struct {
	config
	hooks    []Hook
	mutation *PartnerPageLinkFragmentMutation
}

// Where appends a list predicates to the PartnerPageLinkFragmentUpdate builder.
func (pplfu *PartnerPageLinkFragmentUpdate) Where(ps ...predicate.PartnerPageLinkFragment) *PartnerPageLinkFragmentUpdate {
	pplfu.mutation.Where(ps...)
	return pplfu
}

// SetLinkText sets the "link_text" field.
func (pplfu *PartnerPageLinkFragmentUpdate) SetLinkText(s string) *PartnerPageLinkFragmentUpdate {
	pplfu.mutation.SetLinkText(s)
	return pplfu
}

// SetNillableLinkText sets the "link_text" field if the given value is not nil.
func (pplfu *PartnerPageLinkFragmentUpdate) SetNillableLinkText(s *string) *PartnerPageLinkFragmentUpdate {
	if s != nil {
		pplfu.SetLinkText(*s)
	}
	return pplfu
}

// SetWhamPartnerURLSuffix sets the "wham_partner_url_suffix" field.
func (pplfu *PartnerPageLinkFragmentUpdate) SetWhamPartnerURLSuffix(s string) *PartnerPageLinkFragmentUpdate {
	pplfu.mutation.SetWhamPartnerURLSuffix(s)
	return pplfu
}

// SetNillableWhamPartnerURLSuffix sets the "wham_partner_url_suffix" field if the given value is not nil.
func (pplfu *PartnerPageLinkFragmentUpdate) SetNillableWhamPartnerURLSuffix(s *string) *PartnerPageLinkFragmentUpdate {
	if s != nil {
		pplfu.SetWhamPartnerURLSuffix(*s)
	}
	return pplfu
}

// ClearWhamPartnerURLSuffix clears the value of the "wham_partner_url_suffix" field.
func (pplfu *PartnerPageLinkFragmentUpdate) ClearWhamPartnerURLSuffix() *PartnerPageLinkFragmentUpdate {
	pplfu.mutation.ClearWhamPartnerURLSuffix()
	return pplfu
}

// SetDisplayOrder sets the "display_order" field.
func (pplfu *PartnerPageLinkFragmentUpdate) SetDisplayOrder(i int) *PartnerPageLinkFragmentUpdate {
	pplfu.mutation.ResetDisplayOrder()
	pplfu.mutation.SetDisplayOrder(i)
	return pplfu
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (pplfu *PartnerPageLinkFragmentUpdate) SetNillableDisplayOrder(i *int) *PartnerPageLinkFragmentUpdate {
	if i != nil {
		pplfu.SetDisplayOrder(*i)
	}
	return pplfu
}

// AddDisplayOrder adds i to the "display_order" field.
func (pplfu *PartnerPageLinkFragmentUpdate) AddDisplayOrder(i int) *PartnerPageLinkFragmentUpdate {
	pplfu.mutation.AddDisplayOrder(i)
	return pplfu
}

// Mutation returns the PartnerPageLinkFragmentMutation object of the builder.
func (pplfu *PartnerPageLinkFragmentUpdate) Mutation() *PartnerPageLinkFragmentMutation {
	return pplfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pplfu *PartnerPageLinkFragmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pplfu.sqlSave, pplfu.mutation, pplfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pplfu *PartnerPageLinkFragmentUpdate) SaveX(ctx context.Context) int {
	affected, err := pplfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pplfu *PartnerPageLinkFragmentUpdate) Exec(ctx context.Context) error {
	_, err := pplfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pplfu *PartnerPageLinkFragmentUpdate) ExecX(ctx context.Context) {
	if err := pplfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pplfu *PartnerPageLinkFragmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(partnerpagelinkfragment.Table, partnerpagelinkfragment.Columns, sqlgraph.NewFieldSpec(partnerpagelinkfragment.FieldID, field.TypeUUID))
	if ps := pplfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pplfu.mutation.LinkText(); ok {
		_spec.SetField(partnerpagelinkfragment.FieldLinkText, field.TypeString, value)
	}
	if value, ok := pplfu.mutation.WhamPartnerURLSuffix(); ok {
		_spec.SetField(partnerpagelinkfragment.FieldWhamPartnerURLSuffix, field.TypeString, value)
	}
	if pplfu.mutation.WhamPartnerURLSuffixCleared() {
		_spec.ClearField(partnerpagelinkfragment.FieldWhamPartnerURLSuffix, field.TypeString)
	}
	if value, ok := pplfu.mutation.DisplayOrder(); ok {
		_spec.SetField(partnerpagelinkfragment.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := pplfu.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(partnerpagelinkfragment.FieldDisplayOrder, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pplfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnerpagelinkfragment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pplfu.mutation.done = true
	return n, nil
}

// PartnerPageLinkFragmentUpdateOne is the builder for updating a single PartnerPageLinkFragment entity.
type PartnerPageLinkFragmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnerPageLinkFragmentMutation
}

// SetLinkText sets the "link_text" field.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) SetLinkText(s string) *PartnerPageLinkFragmentUpdateOne {
	pplfuo.mutation.SetLinkText(s)
	return pplfuo
}

// SetNillableLinkText sets the "link_text" field if the given value is not nil.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) SetNillableLinkText(s *string) *PartnerPageLinkFragmentUpdateOne {
	if s != nil {
		pplfuo.SetLinkText(*s)
	}
	return pplfuo
}

// SetWhamPartnerURLSuffix sets the "wham_partner_url_suffix" field.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) SetWhamPartnerURLSuffix(s string) *PartnerPageLinkFragmentUpdateOne {
	pplfuo.mutation.SetWhamPartnerURLSuffix(s)
	return pplfuo
}

// SetNillableWhamPartnerURLSuffix sets the "wham_partner_url_suffix" field if the given value is not nil.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) SetNillableWhamPartnerURLSuffix(s *string) *PartnerPageLinkFragmentUpdateOne {
	if s != nil {
		pplfuo.SetWhamPartnerURLSuffix(*s)
	}
	return pplfuo
}

// ClearWhamPartnerURLSuffix clears the value of the "wham_partner_url_suffix" field.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) ClearWhamPartnerURLSuffix() *PartnerPageLinkFragmentUpdateOne {
	pplfuo.mutation.ClearWhamPartnerURLSuffix()
	return pplfuo
}

// SetDisplayOrder sets the "display_order" field.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) SetDisplayOrder(i int) *PartnerPageLinkFragmentUpdateOne {
	pplfuo.mutation.ResetDisplayOrder()
	pplfuo.mutation.SetDisplayOrder(i)
	return pplfuo
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) SetNillableDisplayOrder(i *int) *PartnerPageLinkFragmentUpdateOne {
	if i != nil {
		pplfuo.SetDisplayOrder(*i)
	}
	return pplfuo
}

// AddDisplayOrder adds i to the "display_order" field.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) AddDisplayOrder(i int) *PartnerPageLinkFragmentUpdateOne {
	pplfuo.mutation.AddDisplayOrder(i)
	return pplfuo
}

// Mutation returns the PartnerPageLinkFragmentMutation object of the builder.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) Mutation() *PartnerPageLinkFragmentMutation {
	return pplfuo.mutation
}

// Where appends a list predicates to the PartnerPageLinkFragmentUpdate builder.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) Where(ps ...predicate.PartnerPageLinkFragment) *PartnerPageLinkFragmentUpdateOne {
	pplfuo.mutation.Where(ps...)
	return pplfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) Select(field string, fields ...string) *PartnerPageLinkFragmentUpdateOne {
	pplfuo.fields = append([]string{field}, fields...)
	return pplfuo
}

// Save executes the query and returns the updated PartnerPageLinkFragment entity.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) Save(ctx context.Context) (*PartnerPageLinkFragment, error) {
	return withHooks(ctx, pplfuo.sqlSave, pplfuo.mutation, pplfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) SaveX(ctx context.Context) *PartnerPageLinkFragment {
	node, err := pplfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) Exec(ctx context.Context) error {
	_, err := pplfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pplfuo *PartnerPageLinkFragmentUpdateOne) ExecX(ctx context.Context) {
	if err := pplfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pplfuo *PartnerPageLinkFragmentUpdateOne) sqlSave(ctx context.Context) (_node *PartnerPageLinkFragment, err error) {
	_spec := sqlgraph.NewUpdateSpec(partnerpagelinkfragment.Table, partnerpagelinkfragment.Columns, sqlgraph.NewFieldSpec(partnerpagelinkfragment.FieldID, field.TypeUUID))
	id, ok := pplfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PartnerPageLinkFragment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pplfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnerpagelinkfragment.FieldID)
		for _, f := range fields {
			if !partnerpagelinkfragment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partnerpagelinkfragment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pplfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pplfuo.mutation.LinkText(); ok {
		_spec.SetField(partnerpagelinkfragment.FieldLinkText, field.TypeString, value)
	}
	if value, ok := pplfuo.mutation.WhamPartnerURLSuffix(); ok {
		_spec.SetField(partnerpagelinkfragment.FieldWhamPartnerURLSuffix, field.TypeString, value)
	}
	if pplfuo.mutation.WhamPartnerURLSuffixCleared() {
		_spec.ClearField(partnerpagelinkfragment.FieldWhamPartnerURLSuffix, field.TypeString)
	}
	if value, ok := pplfuo.mutation.DisplayOrder(); ok {
		_spec.SetField(partnerpagelinkfragment.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := pplfuo.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(partnerpagelinkfragment.FieldDisplayOrder, field.TypeInt, value)
	}
	_node = &PartnerPageLinkFragment{config: pplfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pplfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnerpagelinkfragment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pplfuo.mutation.done = true
	return _node, nil
}

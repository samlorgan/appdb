// Code generated by ent, DO NOT EDIT.

package community

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the community type in the database.
	Label = "community"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWhamSiteID holds the string denoting the wham_site_id field in the database.
	FieldWhamSiteID = "wham_site_id"
	// FieldWhamTitle holds the string denoting the wham_title field in the database.
	FieldWhamTitle = "wham_title"
	// FieldWhanDescription holds the string denoting the whan_description field in the database.
	FieldWhanDescription = "whan_description"
	// FieldWhamCommunityURL holds the string denoting the wham_community_url field in the database.
	FieldWhamCommunityURL = "wham_community_url"
	// FieldWhamCreated holds the string denoting the wham_created field in the database.
	FieldWhamCreated = "wham_created"
	// FieldWhamUpdated holds the string denoting the wham_updated field in the database.
	FieldWhamUpdated = "wham_updated"
	// FieldFeaturedFrom holds the string denoting the featured_from field in the database.
	FieldFeaturedFrom = "featured_from"
	// FieldFeaturedTo holds the string denoting the featured_to field in the database.
	FieldFeaturedTo = "featured_to"
	// EdgeAdgroup holds the string denoting the adgroup edge name in mutations.
	EdgeAdgroup = "adgroup"
	// EdgeCommunityCategory holds the string denoting the community_category edge name in mutations.
	EdgeCommunityCategory = "community_category"
	// Table holds the table name of the community in the database.
	Table = "communities"
	// AdgroupTable is the table that holds the adgroup relation/edge. The primary key declared below.
	AdgroupTable = "adgroup_community_mapping"
	// AdgroupInverseTable is the table name for the ADGroup entity.
	// It exists in this package in order to avoid circular dependency with the "adgroup" package.
	AdgroupInverseTable = "ad_groups"
	// CommunityCategoryTable is the table that holds the community_category relation/edge. The primary key declared below.
	CommunityCategoryTable = "community_category_mapping"
	// CommunityCategoryInverseTable is the table name for the CommunityCategory entity.
	// It exists in this package in order to avoid circular dependency with the "communitycategory" package.
	CommunityCategoryInverseTable = "community_categories"
)

// Columns holds all SQL columns for community fields.
var Columns = []string{
	FieldID,
	FieldWhamSiteID,
	FieldWhamTitle,
	FieldWhanDescription,
	FieldWhamCommunityURL,
	FieldWhamCreated,
	FieldWhamUpdated,
	FieldFeaturedFrom,
	FieldFeaturedTo,
}

var (
	// AdgroupPrimaryKey and AdgroupColumn2 are the table columns denoting the
	// primary key for the adgroup relation (M2M).
	AdgroupPrimaryKey = []string{"ad_group_id", "community_id"}
	// CommunityCategoryPrimaryKey and CommunityCategoryColumn2 are the table columns denoting the
	// primary key for the community_category relation (M2M).
	CommunityCategoryPrimaryKey = []string{"community_category_id", "community_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Community queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWhamSiteID orders the results by the wham_site_id field.
func ByWhamSiteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamSiteID, opts...).ToFunc()
}

// ByWhamTitle orders the results by the wham_title field.
func ByWhamTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamTitle, opts...).ToFunc()
}

// ByWhanDescription orders the results by the whan_description field.
func ByWhanDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhanDescription, opts...).ToFunc()
}

// ByWhamCommunityURL orders the results by the wham_community_url field.
func ByWhamCommunityURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamCommunityURL, opts...).ToFunc()
}

// ByWhamCreated orders the results by the wham_created field.
func ByWhamCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamCreated, opts...).ToFunc()
}

// ByWhamUpdated orders the results by the wham_updated field.
func ByWhamUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhamUpdated, opts...).ToFunc()
}

// ByFeaturedFrom orders the results by the featured_from field.
func ByFeaturedFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeaturedFrom, opts...).ToFunc()
}

// ByFeaturedTo orders the results by the featured_to field.
func ByFeaturedTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeaturedTo, opts...).ToFunc()
}

// ByAdgroupCount orders the results by adgroup count.
func ByAdgroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdgroupStep(), opts...)
	}
}

// ByAdgroup orders the results by adgroup terms.
func ByAdgroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdgroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommunityCategoryCount orders the results by community_category count.
func ByCommunityCategoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommunityCategoryStep(), opts...)
	}
}

// ByCommunityCategory orders the results by community_category terms.
func ByCommunityCategory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommunityCategoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAdgroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdgroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AdgroupTable, AdgroupPrimaryKey...),
	)
}
func newCommunityCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommunityCategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CommunityCategoryTable, CommunityCategoryPrimaryKey...),
	)
}

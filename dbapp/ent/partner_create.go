// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dbapp/ent/application"
	"dbapp/ent/partner"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PartnerCreate is the builder for creating a Partner entity.
type PartnerCreate struct {
	config
	mutation *PartnerMutation
	hooks    []Hook
}

// SetWhamSiteID sets the "wham_site_id" field.
func (pc *PartnerCreate) SetWhamSiteID(i int) *PartnerCreate {
	pc.mutation.SetWhamSiteID(i)
	return pc
}

// SetWhamTitle sets the "wham_title" field.
func (pc *PartnerCreate) SetWhamTitle(s string) *PartnerCreate {
	pc.mutation.SetWhamTitle(s)
	return pc
}

// SetWhamDescription sets the "wham_description" field.
func (pc *PartnerCreate) SetWhamDescription(s string) *PartnerCreate {
	pc.mutation.SetWhamDescription(s)
	return pc
}

// SetKeycloakOrganisation sets the "keycloak_organisation" field.
func (pc *PartnerCreate) SetKeycloakOrganisation(s string) *PartnerCreate {
	pc.mutation.SetKeycloakOrganisation(s)
	return pc
}

// SetWhamPartnerURL sets the "wham_partner_url" field.
func (pc *PartnerCreate) SetWhamPartnerURL(s string) *PartnerCreate {
	pc.mutation.SetWhamPartnerURL(s)
	return pc
}

// SetWhamCreated sets the "wham_created" field.
func (pc *PartnerCreate) SetWhamCreated(t time.Time) *PartnerCreate {
	pc.mutation.SetWhamCreated(t)
	return pc
}

// SetWhamUpdated sets the "wham_updated" field.
func (pc *PartnerCreate) SetWhamUpdated(t time.Time) *PartnerCreate {
	pc.mutation.SetWhamUpdated(t)
	return pc
}

// SetID sets the "id" field.
func (pc *PartnerCreate) SetID(u uuid.UUID) *PartnerCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableID(u *uuid.UUID) *PartnerCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// AddApplicationIDs adds the "application" edge to the Application entity by IDs.
func (pc *PartnerCreate) AddApplicationIDs(ids ...uuid.UUID) *PartnerCreate {
	pc.mutation.AddApplicationIDs(ids...)
	return pc
}

// AddApplication adds the "application" edges to the Application entity.
func (pc *PartnerCreate) AddApplication(a ...*Application) *PartnerCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddApplicationIDs(ids...)
}

// Mutation returns the PartnerMutation object of the builder.
func (pc *PartnerCreate) Mutation() *PartnerMutation {
	return pc.mutation
}

// Save creates the Partner in the database.
func (pc *PartnerCreate) Save(ctx context.Context) (*Partner, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PartnerCreate) SaveX(ctx context.Context) *Partner {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PartnerCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PartnerCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PartnerCreate) defaults() {
	if _, ok := pc.mutation.ID(); !ok {
		v := partner.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PartnerCreate) check() error {
	if _, ok := pc.mutation.WhamSiteID(); !ok {
		return &ValidationError{Name: "wham_site_id", err: errors.New(`ent: missing required field "Partner.wham_site_id"`)}
	}
	if _, ok := pc.mutation.WhamTitle(); !ok {
		return &ValidationError{Name: "wham_title", err: errors.New(`ent: missing required field "Partner.wham_title"`)}
	}
	if _, ok := pc.mutation.WhamDescription(); !ok {
		return &ValidationError{Name: "wham_description", err: errors.New(`ent: missing required field "Partner.wham_description"`)}
	}
	if _, ok := pc.mutation.KeycloakOrganisation(); !ok {
		return &ValidationError{Name: "keycloak_organisation", err: errors.New(`ent: missing required field "Partner.keycloak_organisation"`)}
	}
	if _, ok := pc.mutation.WhamPartnerURL(); !ok {
		return &ValidationError{Name: "wham_partner_url", err: errors.New(`ent: missing required field "Partner.wham_partner_url"`)}
	}
	if _, ok := pc.mutation.WhamCreated(); !ok {
		return &ValidationError{Name: "wham_created", err: errors.New(`ent: missing required field "Partner.wham_created"`)}
	}
	if _, ok := pc.mutation.WhamUpdated(); !ok {
		return &ValidationError{Name: "wham_updated", err: errors.New(`ent: missing required field "Partner.wham_updated"`)}
	}
	return nil
}

func (pc *PartnerCreate) sqlSave(ctx context.Context) (*Partner, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PartnerCreate) createSpec() (*Partner, *sqlgraph.CreateSpec) {
	var (
		_node = &Partner{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(partner.Table, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.WhamSiteID(); ok {
		_spec.SetField(partner.FieldWhamSiteID, field.TypeInt, value)
		_node.WhamSiteID = value
	}
	if value, ok := pc.mutation.WhamTitle(); ok {
		_spec.SetField(partner.FieldWhamTitle, field.TypeString, value)
		_node.WhamTitle = value
	}
	if value, ok := pc.mutation.WhamDescription(); ok {
		_spec.SetField(partner.FieldWhamDescription, field.TypeString, value)
		_node.WhamDescription = value
	}
	if value, ok := pc.mutation.KeycloakOrganisation(); ok {
		_spec.SetField(partner.FieldKeycloakOrganisation, field.TypeString, value)
		_node.KeycloakOrganisation = value
	}
	if value, ok := pc.mutation.WhamPartnerURL(); ok {
		_spec.SetField(partner.FieldWhamPartnerURL, field.TypeString, value)
		_node.WhamPartnerURL = value
	}
	if value, ok := pc.mutation.WhamCreated(); ok {
		_spec.SetField(partner.FieldWhamCreated, field.TypeTime, value)
		_node.WhamCreated = value
	}
	if value, ok := pc.mutation.WhamUpdated(); ok {
		_spec.SetField(partner.FieldWhamUpdated, field.TypeTime, value)
		_node.WhamUpdated = value
	}
	if nodes := pc.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partner.ApplicationTable,
			Columns: partner.ApplicationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PartnerCreateBulk is the builder for creating many Partner entities in bulk.
type PartnerCreateBulk struct {
	config
	err      error
	builders []*PartnerCreate
}

// Save creates the Partner entities in the database.
func (pcb *PartnerCreateBulk) Save(ctx context.Context) ([]*Partner, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Partner, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PartnerCreateBulk) SaveX(ctx context.Context) []*Partner {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PartnerCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PartnerCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
